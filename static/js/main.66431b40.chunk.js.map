{"version":3,"sources":["store/actions/index.ts","store/hooks.ts","utils/index.ts","store/blockchainSlice.ts","store/gameSlice.ts","components/canvasboard.tsx","components/rankingboard.tsx","components/score.tsx","App.tsx","store/nftSlice.ts","store/userSlice.ts","reportWebVitals.ts","store/sagas/blockchainSaga.ts","store/sagas/moveSaga.ts","store/sagas/index.ts","store/index.ts","index.tsx"],"names":["RIGHT","LEFT","UP","DOWN","useAppDispatch","useDispatch","useAppSelector","useSelector","GAME_HEIGHT","GAME_WIDTH","GAME_CHAR_PIXEL_HEIGHT","GAME_CHAR_PIXEL_WIDTH","NFT_CONTRACT","LEADERBOARD_CONTRACT","clearBoard","context","clearRect","drawObject","objectBody","fillColor","strokeStyle","arguments","length","undefined","forEach","object","fillStyle","beginPath","arc","x","y","Math","PI","fill","drawSnake","glowColor","shadowBlur","shadowColor","stroke","randomNumber","max","random","floor","generateRandomPosition","width","height","hasSnakeCollided","snake","currentHeadPos","flag","pos","index","automataTestnet","name","rpc","chainId","chainIdHex","currency","explorer","decimals","RARITY","shortenAddress","input","slice","blockchainSlice","createSlice","initialState","reducers","SUBMIT_HIGH_SCORE","state","action","actions","initialSnakeXPos","initialSnakeYPos","disallowedDirection","score","level","gameSlice","_objectSpread","MOVE_SNAKE","newSnake","payload","concat","_toConsumableArray","pop","SET_DIS_DIRECTION","INCREASE_SNAKE","console","log","snakeLen","LEVEL_UP","RESET_GAME_STATE","RESET_SCORE","INCREMENT_SCORE","STOP_GAME","RESET_GAME","MOVE_SNAKE_EVENT","MOVE_RIGHT_EVENT","MOVE_LEFT_EVENT","MOVE_UP_EVENT","MOVE_DOWN_EVENT","_gameSlice$actions","CanvasBoard","_ref","dispatch","game","playerSnake","userState","user","nftState","nft","snakeGlowColor","rarity","rare","uncommon","canvasRef","useRef","_useState","useState","_useState2","_slicedToArray","setContext","_useState3","_useState4","foodPosition","setFoodPosition","_useState5","_useState6","isConsumed","setIsConsumed","_useState7","_useState8","gameEnded","setGameEnded","moveSnake","useCallback","dx","dy","ds","dlevel","direction","handleKeyEvents","event","key","preventDefault","useEffect","newFoodPosition","current","getContext","xDiff","abs","yDiff","window","removeEventListener","handleResetBoard","addEventListener","wallet","React","createElement","className","ref","color","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","GeneratorFunction","GeneratorFunctionPrototype","p","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","MAX_TOP_PLAYER_COUNT","fetchRanking","_asyncToGenerator","_callee","data","provider","rankingContract","player","_context","ethers","providers","JsonRpcProvider","Contract","Leaderboard_ABI","leaderboard","address","toNumber","t0","_x","apply","RankingBoard","_useSWR","useSWR","refreshInterval","isLoading","error","map","ScoreCard","signerProvider","tokenURI","tokenID","nftSlice","UPDATE_TOKEN_URI","UPDATE_TOKEN_ID","UPDATE_RARITY","RESET","_nftSlice$actions","balance","nftBalance","isConnected","userSlice","UPDATE_BALANCE","UPDATE_NFT_BALANCE","UPDATE_WALLET","UPDATE_IS_CONNECTED","USER_RESET","_userSlice$actions","App","gameState","isMinting","setIsMinting","updateWalletBalance","accounts","getBalance","result","bal","utils","formatEther","mintNFT","signer","nftContract","mintTx","mintTxReceipt","getSigner","NFTABI","safeMint","wait","status","fetchNFT","_ref2","_callee2","rpcProvider","tokenId","tokenURIArray","lastPart","json","_context2","balanceOf","getTokenID","split","RARE_SNAKE_DATA","UNCOMMON_SNAKE_DATA","COMMON_SNAKE_DATA","attributes","trait_type","handleAccountsChanged","_ref4","_callee4","_context4","toLowerCase","getAddress","_x3","ethereum","on","href","target","rel","Button","variant","onClick","_callee5","_context5","disabled","Fragment","CircularProgress","size","Web3Provider","send","_ref3","_callee3","_context3","request","params","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","symbol","_x2","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","_marked","submitHighScore","_marked2","blockchainSaga","takeEvery","moveSaga","watcherMoveSaga","gameSpeed","toString","put","delay","takeLatest","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","gameLogicReducer","blockchain","blockchainReducer","userReducer","nftReducer","middleware","getState","run","theme","createTheme","typography","fontFamily","join","ReactDOM","createRoot","document","getElementById","render","StrictMode","ThemeProvider","Provider"],"mappings":"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","file":"static/js/main.66431b40.chunk.js","sourcesContent":["export const RIGHT = 'RIGHT';\nexport const LEFT = 'LEFT';\nexport const UP = 'UP';\nexport const DOWN = 'DOWN';\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './index';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { ObjectBody } from '../types';\n\nexport const GAME_HEIGHT = 600;\nexport const GAME_WIDTH = 600;\nexport const GAME_CHAR_PIXEL_HEIGHT = 20;\nexport const GAME_CHAR_PIXEL_WIDTH = 20;\nexport const NFT_CONTRACT = '0x27a9dE3e73dfe6F3dA833184Ed44E16b43985ccd';\nexport const LEADERBOARD_CONTRACT = '0x2f65d1142fB7577D8DE00fDA4De4a6A33e6CdD56';\n\nexport const clearBoard = (context: CanvasRenderingContext2D | null) => {\n  if (context) {\n    context.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n  }\n};\n\nexport const drawObject = (\n  context: CanvasRenderingContext2D | null,\n  objectBody: ObjectBody[],\n  fillColor: string,\n  strokeStyle = '#146356',\n) => {\n  if (context && objectBody.length > 0) {\n    objectBody.forEach((object: ObjectBody) => {\n      context.fillStyle = fillColor;\n      context.strokeStyle = strokeStyle;\n      context.beginPath();\n      context.arc(object.x, object.y, 10, 0, 2 * Math.PI);\n      context.fill();\n    });\n  }\n};\n\nexport const drawSnake = (\n  context: CanvasRenderingContext2D | null,\n  objectBody: ObjectBody[],\n  fillColor: string,\n  glowColor: string,\n) => {\n  if (context && objectBody.length > 0) {\n    objectBody.forEach((object: ObjectBody) => {\n      context.fillStyle = fillColor;\n      context.strokeStyle = fillColor;\n      context.beginPath();\n\n      context.arc(object.x, object.y, 9, 0, 2 * Math.PI);\n      context.shadowBlur = 10;\n      context.shadowColor = glowColor;\n      context.fill();\n      context.stroke();\n    });\n  }\n};\n\nfunction randomNumber(max: number) {\n  let random = Math.floor(Math.random() * max);\n  while (\n    random <= 0 ||\n    random < GAME_CHAR_PIXEL_WIDTH ||\n    random >= GAME_HEIGHT ||\n    random >= random + GAME_CHAR_PIXEL_HEIGHT\n  ) {\n    random = Math.floor(Math.random() * max);\n    random = random - (random % GAME_CHAR_PIXEL_HEIGHT); // remove the stray digits so that it is even\n  }\n  return random;\n}\n\nexport const generateRandomPosition = (width: number, height: number) => {\n  return {\n    x: randomNumber(width),\n    y: randomNumber(height),\n  };\n};\n\nexport const hasSnakeCollided = (snake: ObjectBody[], currentHeadPos: ObjectBody) => {\n  // check if snake collided with its own head\n  let flag = false;\n  snake.forEach((pos: ObjectBody, index: number) => {\n    if (pos.x === currentHeadPos.x && pos.y === currentHeadPos.y && index !== 0) {\n      flag = true;\n    }\n  });\n  return flag;\n};\n\nexport interface NetworkChain {\n  name: string;\n  rpc: string;\n  chainId: number;\n  chainIdHex: string;\n  currency: string;\n  explorer: string;\n  decimals: number;\n}\n\nexport const automataTestnet = {\n  name: 'Automata Testnet',\n  rpc: 'https://1rpc.io/ata/testnet',\n  chainId: 1398243,\n  chainIdHex: '0x1555e3',\n  currency: 'ETH',\n  explorer: 'https://explorer.ata.network',\n  decimals: 18,\n} as NetworkChain;\n\nexport enum RARITY {\n  common = 'common',\n  uncommon = 'uncommon',\n  rare = 'rare',\n}\n\nexport const shortenAddress = (input: string, length = 7) => input.slice(0, length) + '...';\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const blockchainSlice = createSlice({\n  name: 'blockchain',\n  initialState: {},\n  reducers: {\n    SUBMIT_HIGH_SCORE(state, action) {},\n  },\n});\n\nexport const { SUBMIT_HIGH_SCORE } = blockchainSlice.actions;\n\nexport default blockchainSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { GAME_WIDTH, GAME_CHAR_PIXEL_WIDTH, GAME_HEIGHT } from '../utils';\n\n// center the snake at center of screen initially\nconst initialSnakeXPos = GAME_WIDTH / 2 - GAME_CHAR_PIXEL_WIDTH * 2;\nconst initialSnakeYPos = GAME_HEIGHT / 2;\n\nconst initialState = {\n  snake: [\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH * 4, y: initialSnakeYPos },\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH * 3, y: initialSnakeYPos },\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH * 2, y: initialSnakeYPos },\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH, y: initialSnakeYPos },\n    { x: initialSnakeXPos, y: initialSnakeYPos },\n  ],\n  disallowedDirection: '',\n  score: 0,\n  level: 1, // higher level = higher snake speed, see moveSaga.ts\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState: {\n    ...initialState,\n  },\n  reducers: {\n    MOVE_SNAKE: (state, action) => {\n      let newSnake = [\n        {\n          x: state.snake[0].x + action.payload.x,\n          y: state.snake[0].y + action.payload.y,\n        },\n        ...state.snake,\n      ];\n      // remove the last segment coordinates\n      newSnake.pop();\n\n      state.snake = newSnake;\n    },\n    SET_DIS_DIRECTION: (state, action) => {\n      state.disallowedDirection = action.payload;\n    },\n    INCREASE_SNAKE: (state) => {\n      console.log('increase snake');\n      // append a segment to the end of the snake\n      const snakeLen = state.snake.length;\n\n      state.snake = [\n        ...state.snake,\n        {\n          x: state.snake[snakeLen - 1].x - GAME_CHAR_PIXEL_WIDTH,\n          y: state.snake[snakeLen - 1].y - GAME_CHAR_PIXEL_WIDTH,\n        },\n      ];\n    },\n    LEVEL_UP: (state) => {\n      state.level = state.level + 1;\n    },\n    RESET_GAME_STATE: (state) => {\n      state.snake = [...initialState.snake];\n      state.disallowedDirection = initialState.disallowedDirection;\n      state.score = initialState.score;\n      state.level = initialState.level;\n    },\n    RESET_SCORE: (state) => {\n      state.score = 0;\n    },\n    INCREMENT_SCORE: (state) => {\n      state.score = state.score + 2;\n\n      if (state.score % 20 === 0) {\n        // every X points increase level\n        state.level = state.level + 1;\n      }\n    },\n    STOP_GAME() {},\n    RESET_GAME() {},\n    MOVE_SNAKE_EVENT(state, action) {},\n    MOVE_RIGHT_EVENT() {},\n    MOVE_LEFT_EVENT() {},\n    MOVE_UP_EVENT() {},\n    MOVE_DOWN_EVENT() {},\n  },\n});\n\nexport const {\n  MOVE_SNAKE,\n  SET_DIS_DIRECTION,\n  INCREASE_SNAKE,\n  RESET_GAME_STATE,\n  RESET_SCORE,\n  INCREMENT_SCORE,\n  STOP_GAME,\n  RESET_GAME,\n  MOVE_SNAKE_EVENT,\n  MOVE_RIGHT_EVENT,\n  MOVE_LEFT_EVENT,\n  MOVE_UP_EVENT,\n  MOVE_DOWN_EVENT,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import 'dotenv/config';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport '../App.css';\nimport { DOWN, LEFT, RIGHT, UP } from '../store/actions';\nimport { useAppSelector } from '../store/hooks';\nimport { ObjectBody } from '../types';\nimport {\n  clearBoard,\n  drawObject,\n  drawSnake,\n  GAME_CHAR_PIXEL_HEIGHT,\n  GAME_CHAR_PIXEL_WIDTH,\n  generateRandomPosition,\n  hasSnakeCollided,\n  RARITY,\n} from '../utils';\nimport { SUBMIT_HIGH_SCORE } from '../store/blockchainSlice';\nimport {\n  INCREASE_SNAKE,\n  INCREMENT_SCORE,\n  STOP_GAME,\n  RESET_GAME,\n  RESET_GAME_STATE,\n  MOVE_SNAKE_EVENT,\n  MOVE_RIGHT_EVENT,\n  MOVE_LEFT_EVENT,\n  MOVE_UP_EVENT,\n  MOVE_DOWN_EVENT,\n} from '../store/gameSlice';\n\ninterface CanvasBoardProps {\n  height: number;\n  width: number;\n}\n\nfunction CanvasBoard({ height, width }: CanvasBoardProps) {\n  const dispatch = useDispatch();\n  const score = useAppSelector((state: any) => state.game.score);\n  const playerSnake = useAppSelector((state: any) => state.game.snake);\n  const level = useAppSelector((state: any) => state.game.level);\n  const userState = useAppSelector((state: any) => state.user);\n  const nftState = useAppSelector((state: any) => state.nft);\n  const disallowedDirection = useAppSelector((state: any) => state.game.disallowedDirection);\n\n  const snakeColor = '#ffffff';\n  const snakeGlowColor =\n    nftState.rarity === RARITY.rare ? '#ffff00' : nftState.rarity === RARITY.uncommon ? '#2979ff' : '#00e676';\n\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\n  const [foodPosition, setFoodPosition] = useState<ObjectBody>(\n    generateRandomPosition(width - GAME_CHAR_PIXEL_WIDTH, height - GAME_CHAR_PIXEL_HEIGHT),\n  );\n  const [isConsumed, setIsConsumed] = useState<boolean>(false);\n  const [gameEnded, setGameEnded] = useState<boolean>(false);\n\n  // ds = direction not allowed\n  const moveSnake = useCallback(\n    (dx = 0, dy = 0, ds: string, dlevel: number) => {\n      if (dx > 0 && dy === 0 && ds !== RIGHT) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_RIGHT_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n\n      if (dx < 0 && dy === 0 && ds !== LEFT) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_LEFT_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n\n      if (dx === 0 && dy < 0 && ds !== UP) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_UP_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n\n      if (dx === 0 && dy > 0 && ds !== DOWN) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_DOWN_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n    },\n    [dispatch],\n  );\n\n  const handleKeyEvents = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'w':\n          !gameEnded && moveSnake(0, -20, disallowedDirection, level);\n          break;\n        case 's':\n          !gameEnded && moveSnake(0, 20, disallowedDirection, level);\n          break;\n        case 'a':\n          if (!disallowedDirection) {\n            // prevent users from moving the opposite direction (left)\n            // at the start of the game\n            event.preventDefault();\n            break;\n          }\n          !gameEnded && moveSnake(-20, 0, disallowedDirection, level);\n          break;\n        case 'd':\n          !gameEnded && moveSnake(20, 0, disallowedDirection, level);\n          break;\n      }\n    },\n    [disallowedDirection, level, gameEnded, moveSnake],\n  );\n\n  const isOutOfBoundary = (snake: any) => {\n    return snake[0].x >= width || snake[0].x <= 0 || snake[0].y <= 0 || snake[0].y >= height;\n  };\n\n  useEffect(() => {\n    // snake eat the food\n    const newFoodPosition = generateRandomPosition(width - GAME_CHAR_PIXEL_WIDTH, height - GAME_CHAR_PIXEL_HEIGHT);\n\n    if (isConsumed && foodPosition !== newFoodPosition) {\n      setFoodPosition(newFoodPosition);\n      setIsConsumed(false);\n      dispatch(INCREASE_SNAKE());\n      dispatch(INCREMENT_SCORE());\n    }\n  }, [isConsumed, foodPosition, width, height]);\n\n  useEffect(() => {\n    // draw on canvas each time\n    setContext(canvasRef.current && canvasRef.current.getContext('2d'));\n    clearBoard(context);\n\n    // render snake\n    playerSnake && drawSnake(context, playerSnake, snakeColor, snakeGlowColor);\n\n    // render food\n    drawObject(context, [foodPosition], '#ffffff');\n  }, [context, playerSnake, foodPosition]);\n\n  useEffect(() => {\n    const xDiff = Math.abs(playerSnake[0].x - foodPosition.x);\n    const yDiff = Math.abs(playerSnake[1].y - foodPosition.y);\n\n    // difference of position might be off a little\n    // when food is consumed\n    if (xDiff <= 16 && yDiff <= 16 && !isConsumed) {\n      // require isConsumed variable to prevent double counting\n      setIsConsumed(true);\n    }\n  }, [playerSnake, foodPosition, isConsumed]);\n\n  useEffect(() => {\n    // check boundaries and collision\n    if (hasSnakeCollided(playerSnake, playerSnake[0]) || isOutOfBoundary(playerSnake)) {\n      console.log('game ends');\n      setGameEnded(true);\n      dispatch(STOP_GAME());\n      window.removeEventListener('keypress', handleKeyEvents);\n    } else {\n      setGameEnded(false);\n    }\n  }, [playerSnake, dispatch, handleKeyEvents]);\n\n  const handleResetBoard = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'r':\n          // resetBoard;\n          setGameEnded(false);\n          dispatch(RESET_GAME());\n          dispatch(RESET_GAME_STATE());\n          clearBoard(context);\n\n          // render snake\n          playerSnake && drawSnake(context, playerSnake, snakeColor, snakeGlowColor);\n\n          // render food\n          const newFoodPosition = generateRandomPosition(\n            width - GAME_CHAR_PIXEL_WIDTH,\n            height - GAME_CHAR_PIXEL_HEIGHT,\n          );\n          setFoodPosition(newFoodPosition);\n      }\n    },\n    [context, dispatch, height, width, playerSnake],\n  );\n\n  useEffect(() => {\n    // key input\n    window.addEventListener('keypress', handleKeyEvents);\n    window.addEventListener('keypress', handleResetBoard);\n\n    return () => {\n      window.removeEventListener('keypress', handleKeyEvents);\n      window.removeEventListener('keypress', handleResetBoard);\n    };\n  }, [disallowedDirection, handleKeyEvents]);\n\n  useEffect(() => {\n    if (gameEnded) {\n      dispatch(\n        SUBMIT_HIGH_SCORE({\n          wallet: `${userState.wallet}`,\n          score: `${score}`,\n        }),\n      );\n    }\n  }, [gameEnded]);\n\n  return (\n    <div className=\"mainCanvasWrapper\">\n      <canvas\n        ref={canvasRef}\n        className={gameEnded ? 'canvasWrapperGameEnd' : 'canvasWrapper'}\n        height={height}\n        width={width}\n      />\n      <div>Controls: W,S,A,D to move - R to reset</div>\n      {gameEnded && <div color=\"red\">Game Over</div>}\n    </div>\n  );\n}\n\nexport default CanvasBoard;\n","import { ethers } from 'ethers';\nimport React from 'react';\nimport useSWR from 'swr';\nimport { automataTestnet, LEADERBOARD_CONTRACT, shortenAddress } from '../utils';\nimport Leaderboard_ABI from '../abis/Leaderboard_ABI.json';\n\ninterface Player {\n  address: string;\n  score: number;\n}\n\n/**\n * ranking board contract tracks top 10\n * but in case 1rpc rate limit, we fetch only 3\n */\nconst MAX_TOP_PLAYER_COUNT = 10;\n\nconst fetchRanking = async (key: string) => {\n  console.log('fetching ranking');\n  let data: Player[] = [];\n\n  const provider = new ethers.providers.JsonRpcProvider(automataTestnet.rpc);\n  const rankingContract = new ethers.Contract(LEADERBOARD_CONTRACT, Leaderboard_ABI, provider);\n\n  try {\n    for (let i = 0; i < MAX_TOP_PLAYER_COUNT; i++) {\n      const player = await rankingContract.leaderboard(i);\n      if (player.player === '0x0000000000000000000000000000000000000000') {\n        // leader board is empty\n        break;\n      }\n      data.push({\n        address: player.player,\n        score: player.score.toNumber(),\n      } as Player);\n    }\n  } catch (err) {\n    console.log('error fetching ranking: ', err);\n  }\n\n  return data;\n};\n\nfunction RankingBoard() {\n  const { data, error, isLoading } = useSWR('fetch_ranking', fetchRanking, { refreshInterval: 30000 });\n\n  return (\n    <div className=\"rankingBoardWrapper\">\n      <div>TOP {MAX_TOP_PLAYER_COUNT} PLAYERS</div>\n      {!data || isLoading ? (\n        <p>Loading...</p>\n      ) : data ? (\n        <div className=\"rankingContentWrapper\">\n          {data.length === 0 && <div>No highscores.</div>}\n          {data.map((player, index) => {\n            return (\n              <div className=\"rankCard\" key={index}>\n                <div>\n                  {index + 1}. {shortenAddress(player.address)}\n                </div>\n                <div>{player.score}</div>\n              </div>\n            );\n          })}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default RankingBoard;\n","import React from 'react';\nimport { useAppSelector } from '../store/hooks';\n\nfunction ScoreCard() {\n  // const score = useSelector((state: any) => (state.gameReducer as GameState).score);\n  const score = useAppSelector((state: any) => state.game.score);\n  return (\n    <div className=\"scoreWrapper\">\n      <div className=\"scoreTitle\">SCORE</div>\n      <div className=\"scoreValue\">{score}</div>\n    </div>\n  );\n}\n\nexport default ScoreCard;\n","import Button from '@mui/material/Button';\nimport { ethers } from 'ethers';\nimport React, { useEffect, useState } from 'react';\nimport NFTABI from './abis/NFTABI.json';\nimport './App.css';\nimport CanvasBoard from './components/canvasboard';\nimport RankingBoard from './components/rankingboard';\nimport ScoreCard from './components/score';\nimport COMMON_SNAKE_DATA from './metadata/1.json';\nimport UNCOMMON_SNAKE_DATA from './metadata/2.json';\nimport RARE_SNAKE_DATA from './metadata/3.json';\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { UPDATE_RARITY, UPDATE_TOKEN_ID, UPDATE_TOKEN_URI } from './store/nftSlice';\nimport { UPDATE_BALANCE, UPDATE_IS_CONNECTED, UPDATE_NFT_BALANCE, UPDATE_WALLET } from './store/userSlice';\nimport { automataTestnet, GAME_HEIGHT, GAME_WIDTH, NFT_CONTRACT, shortenAddress } from './utils';\nimport { CircularProgress } from '@mui/material';\n\nlet signerProvider: ethers.providers.Web3Provider;\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  const userState = useAppSelector((state) => state.user);\n  const gameState = useAppSelector((state) => state.game);\n  const [isMinting, setIsMinting] = useState(false);\n\n  const updateWalletBalance = (accounts: any) => {\n    if (signerProvider && accounts.length) {\n      signerProvider.getBalance(accounts[0]).then((result: any) => {\n        const bal = ethers.utils.formatEther(result);\n        dispatch(UPDATE_BALANCE(bal));\n      });\n    }\n  };\n\n  const mintNFT = async () => {\n    if (!signerProvider) {\n      return;\n    }\n\n    const signer = signerProvider.getSigner();\n    const nftContract = new ethers.Contract(NFT_CONTRACT, NFTABI, signer);\n    const mintTx = await nftContract.safeMint();\n    const mintTxReceipt = await mintTx.wait();\n\n    if (mintTxReceipt && mintTxReceipt.status === 1) {\n      await fetchNFT(userState.wallet);\n    }\n  };\n\n  const fetchNFT = async (wallet: string) => {\n    let rpcProvider: ethers.providers.JsonRpcProvider = new ethers.providers.JsonRpcProvider(automataTestnet.rpc);\n    const nftContract = new ethers.Contract(NFT_CONTRACT, NFTABI, rpcProvider);\n    const nftBalance = await nftContract.balanceOf(wallet);\n\n    if (nftBalance) {\n      const tokenId = await nftContract.getTokenID(wallet);\n      const tokenURI = await nftContract.tokenURI(tokenId);\n\n      // read token URI and save nft info\n      // should do this from a db or directly via IPFS\n      // ipfs url is https://<gateway>/ipfs/<CID>/<num>.json\n      const tokenURIArray = tokenURI.split('/');\n      const lastPart = tokenURIArray[tokenURIArray.length - 1];\n      let rarity;\n      let json;\n\n      if (lastPart === '3.json') {\n        json = RARE_SNAKE_DATA;\n      } else if (lastPart === '2.json') {\n        json = UNCOMMON_SNAKE_DATA;\n      } else {\n        json = COMMON_SNAKE_DATA;\n      }\n\n      rarity = json.attributes[0].trait_type === 'Rarity' && json.attributes[0].value;\n\n      console.log('token id: ', tokenId.toNumber());\n      console.log('token uri: ', tokenURI);\n      console.log('rarity: ', rarity);\n\n      dispatch(UPDATE_NFT_BALANCE(nftBalance.toNumber()));\n      dispatch(UPDATE_TOKEN_ID(tokenId.toNumber()));\n      dispatch(UPDATE_TOKEN_URI(tokenURI));\n      dispatch(UPDATE_RARITY(rarity));\n    }\n  };\n\n  const onConnectWallet = () => {\n    if (!window.ethereum) {\n      console.log('Please install Metamask');\n      return;\n    }\n\n    signerProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // MetaMask requires requesting permission to connect users accounts\n    signerProvider\n      .send('eth_requestAccounts', [])\n      .then(async (accounts: any) => {\n        if (accounts.length > 0) {\n          try {\n            await (signerProvider.provider as any).request({\n              method: 'wallet_addEthereumChain',\n              params: [\n                {\n                  chainId: automataTestnet.chainIdHex,\n                  chainName: automataTestnet.name,\n                  rpcUrls: [`${automataTestnet.rpc}`],\n                  blockExplorerUrls: [`${automataTestnet.explorer}`],\n                  nativeCurrency: {\n                    symbol: automataTestnet.currency,\n                    decimals: 18,\n                  },\n                },\n              ],\n            });\n\n            const address = ethers.utils.getAddress(accounts[0]);\n\n            await fetchNFT(address);\n            dispatch(UPDATE_WALLET(address));\n            dispatch(UPDATE_IS_CONNECTED(true));\n            updateWalletBalance(accounts);\n          } catch (err) {\n            console.error(err);\n          }\n        }\n      })\n      .catch((e: any) => console.error(e));\n  };\n\n  const handleAccountsChanged = async (accounts: any) => {\n    if (accounts.length === 0) {\n      console.log('Please connect to Metamask');\n    } else if (accounts[0].toLowerCase() !== userState.wallet.toLowerCase()) {\n      const address = ethers.utils.getAddress(accounts[0]);\n      await fetchNFT(address);\n      dispatch(UPDATE_WALLET(address));\n      updateWalletBalance(accounts);\n    }\n    setIsMinting(false);\n  };\n\n  useEffect(() => {\n    window.ethereum.on('accountsChanged', handleAccountsChanged);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {userState.isConnected ? (\n        userState.nftBalance > 0 ? (\n          <div className=\"gameScreenWrapper\">\n            <div className=\"mainBoardWrapper\">\n              <div className=\"header\">\n                <div className=\"walletInfoWrapper\">\n                  <div className=\"walletTitle\">LEVEL</div>\n                  <div className=\"walletValue\">{gameState.level}</div>\n                </div>\n                <ScoreCard />\n                <div className=\"walletInfoWrapper\">\n                  <div className=\"walletTitle\">WALLET</div>\n                  <div className=\"walletValue\">{shortenAddress(userState.wallet)}</div>\n                </div>\n              </div>\n              <CanvasBoard height={GAME_HEIGHT} width={GAME_WIDTH} />\n            </div>\n            <RankingBoard />\n          </div>\n        ) : (\n          <div className=\"menu\">\n            <div className=\"menu-title\">Snake</div>\n            <p>This game requires you to mint a NFT to proceed.</p>\n            <p>\n              For funds to mint the NFT, get some Sepolia ETH from{' '}\n              <a href=\"https://sepoliafaucet.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                https://sepoliafaucet.com/\n              </a>\n              .<br />\n              Bridge it to Automata Testnet via{' '}\n              <a href=\"https://bridge.ata.network/#/deposit\" target=\"_blank\" rel=\"noopener noreferrer\">\n                https://bridge.ata.network/#/deposit\n              </a>\n            </p>\n            <p>\n              Click <strong>Mint NFT</strong> to mint a Snake and wait for the trasaction to complete to start the game.\n            </p>\n            <Button\n              variant=\"outlined\"\n              onClick={async () => {\n                try {\n                  setIsMinting(true);\n                  await mintNFT();\n                } catch (e) {\n                  console.log(e);\n                } finally {\n                  setIsMinting(false);\n                }\n              }}\n              disabled={isMinting}\n            >\n              {isMinting && (\n                <>\n                  <CircularProgress size={14} />\n                  <>&nbsp;</>\n                </>\n              )}{' '}\n              Mint NFT\n            </Button>\n          </div>\n        )\n      ) : (\n        <div className=\"menu\">\n          <div className=\"menu-title\">Snake</div>\n          <div>\n            <p>Welcome to the traditional snake game.</p>\n            <p>\n              Click <strong>Start Game</strong> and connect with your Metamask wallet.\n            </p>\n          </div>\n          <Button variant=\"outlined\" onClick={() => onConnectWallet()}>\n            Start Game\n          </Button>\n        </div>\n      )}\n      {/* <CanvasBoard height={GAME_HEIGHT} width={GAME_WIDTH} /> */}\n    </div>\n  );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  tokenURI: '',\n  tokenID: '',\n  rarity: '',\n};\n\nexport const nftSlice = createSlice({\n  name: 'nft',\n  initialState: {\n    ...initialState,\n  },\n  reducers: {\n    UPDATE_TOKEN_URI: (state, action) => {\n      state.tokenURI = action.payload;\n    },\n    UPDATE_TOKEN_ID: (state, action) => {\n      state.tokenID = action.payload;\n    },\n    UPDATE_RARITY: (state, action) => {\n      state.rarity = action.payload;\n    },\n    RESET: (state) => {\n      state = initialState;\n    },\n  },\n});\n\nexport const { UPDATE_TOKEN_URI, UPDATE_TOKEN_ID, UPDATE_RARITY } = nftSlice.actions;\n\nexport default nftSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  balance: '0',\n  nftBalance: 0,\n  wallet: '',\n  isConnected: false,\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    ...initialState,\n  },\n  reducers: {\n    UPDATE_BALANCE: (state, action) => {\n      state.balance = action.payload;\n    },\n    UPDATE_NFT_BALANCE: (state, action) => {\n      state.nftBalance = action.payload;\n    },\n    UPDATE_WALLET: (state, action) => {\n      state.wallet = action.payload;\n    },\n    UPDATE_IS_CONNECTED: (state, action) => {\n      state.isConnected = action.payload;\n    },\n    USER_RESET: (state) => {\n      state = initialState;\n    },\n  },\n});\n\nexport const { UPDATE_BALANCE, UPDATE_NFT_BALANCE, UPDATE_WALLET, UPDATE_IS_CONNECTED, USER_RESET } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'dotenv/config';\nimport { ethers } from 'ethers';\nimport { call, takeEvery } from 'redux-saga/effects';\nimport { automataTestnet, LEADERBOARD_CONTRACT } from '../../utils';\nimport { SUBMIT_HIGH_SCORE } from '../blockchainSlice';\nimport Leaderboard_ABI from '../../abis/Leaderboard_ABI.json';\n\nasync function invokeContract(wallet: string, score: number) {\n  const deployerKey = process.env.REACT_APP_LEADERBOARD_PK || '';\n  const provider = new ethers.providers.JsonRpcProvider(automataTestnet.rpc);\n  const signer = new ethers.Wallet(deployerKey, provider);\n  const scoreboardContract = new ethers.Contract(LEADERBOARD_CONTRACT, Leaderboard_ABI, signer);\n  const tx = await scoreboardContract.addScore(`${wallet}`, `${score}`);\n  const txReceipt = await tx.wait();\n\n  if (txReceipt && txReceipt.status === 1) {\n    console.log('score updated: ', tx);\n  }\n}\n\n/**\n * listen to submit high score from dispatch and call contract\n */\nfunction* submitHighScore(action: any) {\n  console.log('submit high score');\n  // submit highscore using deployer wallet\n  // const deployerKey = process.env.REACT_APP_LEADERBOARD_PK || '';\n  // const { wallet, score } = action.payload;\n\n  // if (!deployerKey || score <= 0) {\n  //   console.error('Deployer wallet not configure');\n  //   return;\n  // }\n\n  // yield call(invokeContract, wallet, score);\n}\n\nfunction* blockchainSaga() {\n  yield takeEvery(SUBMIT_HIGH_SCORE, submitHighScore);\n}\n\nexport default blockchainSaga;\n","import { delay, put, takeLatest } from 'redux-saga/effects';\nimport { DOWN, LEFT, RIGHT, UP } from '../actions';\nimport {\n  MOVE_DOWN_EVENT,\n  MOVE_LEFT_EVENT,\n  MOVE_RIGHT_EVENT,\n  MOVE_SNAKE,\n  MOVE_SNAKE_EVENT,\n  MOVE_UP_EVENT,\n  RESET_GAME,\n  SET_DIS_DIRECTION,\n  STOP_GAME,\n} from '../gameSlice';\n\nexport function* moveSaga(actions: any) {\n  // keep looping to move the snake\n  while (actions.type !== RESET_GAME.toString() && actions.type !== STOP_GAME.toString()) {\n    // run the snake\n    yield put(\n      MOVE_SNAKE({\n        x: actions.payload.x,\n        y: actions.payload.y,\n      }),\n    );\n\n    // set the invalid direction\n    // invalid direction is always opposite\n    switch (actions.payload.direction.type.toString()) {\n      case `${MOVE_RIGHT_EVENT}`:\n        yield put(SET_DIS_DIRECTION(LEFT));\n        break;\n      case `${MOVE_LEFT_EVENT}`:\n        yield put(SET_DIS_DIRECTION(RIGHT));\n        break;\n      case `${MOVE_UP_EVENT}`:\n        yield put(SET_DIS_DIRECTION(DOWN));\n        break;\n      case `${MOVE_DOWN_EVENT}`:\n        yield put(SET_DIS_DIRECTION(UP));\n        break;\n    }\n\n    let gameSpeed = 100; // lower number = faster\n    if (actions.payload.level) {\n      const level = actions.payload.level;\n      if (level === 1) {\n        gameSpeed = 100;\n      } else if (level === 2) {\n        gameSpeed = 90;\n      } else if (level === 3) {\n        gameSpeed = 80;\n      } else if (level === 4) {\n        gameSpeed = 70;\n      } else if (level === 5) {\n        gameSpeed = 60;\n      } else if (level > 5) {\n        gameSpeed = 50;\n      } else if (level > 9) {\n        gameSpeed = 40;\n      }\n    }\n    yield delay(gameSpeed);\n  }\n}\n\nexport function* watcherMoveSaga() {\n  yield takeLatest([MOVE_SNAKE_EVENT, RESET_GAME, STOP_GAME], moveSaga);\n}\n","import { all } from 'redux-saga/effects';\nimport blockchainSaga from './blockchainSaga';\nimport { watcherMoveSaga } from './moveSaga';\n\nexport function* rootSaga() {\n  yield all([blockchainSaga(), watcherMoveSaga()]);\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport userReducer from './userSlice';\nimport nftReducer from './nftSlice';\nimport blockchainReducer from './blockchainSlice';\nimport gameLogicReducer from './gameSlice';\nimport { rootSaga } from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    game: gameLogicReducer,\n    blockchain: blockchainReducer,\n    user: userReducer,\n    nft: nftReducer,\n  },\n  middleware: [sagaMiddleware],\n});\n\nconsole.log(store.getState());\n\nsagaMiddleware.run(rootSaga);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport { createTheme, ThemeProvider } from '@mui/material';\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: ['Play', 'sans-serif'].join(','),\n  },\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}