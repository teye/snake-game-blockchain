{"version":3,"sources":["assets/garden_snake.png","store/actions/index.ts","store/hooks.ts","utils/index.ts","store/blockchainSlice.ts","store/gameSlice.ts","components/modal/gameOverModal.tsx","components/modal/nftDetailsModal.tsx","components/canvasboard.tsx","components/rankingboard.tsx","components/score.tsx","store/nftSlice.ts","store/userSlice.ts","utils/metamask.ts","components/modal/startScreenModal.tsx","App.tsx","reportWebVitals.ts","store/sagas/blockchainSaga.ts","store/sagas/moveSaga.ts","store/sagas/index.ts","store/index.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","RIGHT","LEFT","UP","DOWN","useAppDispatch","useDispatch","useAppSelector","useSelector","GAME_HEIGHT","GAME_WIDTH","GAME_CHAR_PIXEL_HEIGHT","GAME_CHAR_PIXEL_WIDTH","NFT_CONTRACT","LEADERBOARD_CONTRACT","clearBoard","context","clearRect","drawObject","objectBody","fillColor","strokeStyle","arguments","length","undefined","forEach","object","fillStyle","beginPath","arc","x","y","Math","PI","fill","drawSnake","glowColor","shadowBlur","shadowColor","stroke","randomNumber","max","random","floor","generateRandomPosition","width","height","hasSnakeCollided","snake","currentHeadPos","flag","pos","index","gameNetwork","name","rpc","chainId","chainIdHex","currency","explorer","decimals","RARITY","shortenAddress","input","slice","blockchainSlice","createSlice","initialState","reducers","SUBMIT_HIGH_SCORE","state","action","actions","initialSnakeXPos","initialSnakeYPos","disallowedDirection","score","level","gameSlice","_objectSpread","MOVE_SNAKE","newSnake","payload","concat","_toConsumableArray","pop","SET_DIS_DIRECTION","INCREASE_SNAKE","console","log","snakeLen","LEVEL_UP","RESET_GAME_STATE","RESET_SCORE","INCREMENT_SCORE","STOP_GAME","RESET_GAME","MOVE_SNAKE_EVENT","MOVE_RIGHT_EVENT","MOVE_LEFT_EVENT","MOVE_UP_EVENT","MOVE_DOWN_EVENT","_gameSlice$actions","GameOverModal","props","open","game","React","createElement","Dialog","hideBackdrop","PaperProps","style","backgroundColor","borderRadius","className","NFTDetailsModal","onClose","nftState","nft","_useState","useState","_useState2","_slicedToArray","metadata","setMetadata","_useState3","_useState4","imageSrc","setImageSrc","useEffect","tokenURI","json","tokenURIArray","split","lastPart","RARE_SNAKE_DATA","UNCOMMON_SNAKE_DATA","COMMON_SNAKE_DATA","description","image","external_url","attributes","JSON","parse","stringify","gardenSnake","src","alt","tokenID","rarity","CanvasBoard","_ref","dispatch","playerSnake","userState","user","snakeGlowColor","useMemo","common","rare","uncommon","canvasRef","useRef","setContext","foodPosition","setFoodPosition","_useState5","_useState6","isConsumed","setIsConsumed","_useState7","_useState8","gameEnded","setGameEnded","_useState9","_useState10","openNFTModal","setOpenNFTModal","moveSnake","useCallback","dx","dy","ds","dlevel","direction","handleKeyEvents","event","key","preventDefault","newFoodPosition","nftBalance","current","getContext","xDiff","abs","yDiff","window","removeEventListener","handleResetBoard","isConnected","addEventListener","wallet","ref","Button","variant","onClick","sx","color","fontSize","fontWeight","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","GeneratorFunction","GeneratorFunctionPrototype","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","MAX_TOP_PLAYER_COUNT","fetchRanking","_asyncToGenerator","_callee","data","provider","rankingContract","player","_context","ethers","providers","JsonRpcProvider","Contract","Leaderboard_ABI","leaderboard","address","toNumber","t0","_x","apply","RankingBoard","_useSWR","useSWR","refreshInterval","isLoading","error","map","Blockies","seed","size","scale","bgColor","spotColor","ScoreCard","nftSlice","UPDATE_TOKEN_URI","UPDATE_TOKEN_ID","UPDATE_RARITY","RESET","_nftSlice$actions","balance","userSlice","UPDATE_BALANCE","UPDATE_NFT_BALANCE","UPDATE_WALLET","UPDATE_IS_CONNECTED","USER_RESET","_userSlice$actions","maybeEthereum","ethereum","metaMask","StartScreenModal","signerProvider","isStarting","isMinting","onConnectWallet","mintNFT","setIsMinting","Fragment","href","target","rel","disabled","CircularProgress","disableElevation","App","gameState","setIsStarting","openStartScreen","setOpenStartScreen","updateWalletBalance","accounts","getBalance","result","bal","utils","formatEther","signer","nftContract","mintTx","mintTxReceipt","getSigner","NFTABI","safeMint","wait","status","fetchNFT","_ref2","_callee2","rpcProvider","tokenId","_context2","NFTNoVRFABI","balanceOf","getTokenID","trait_type","handleAccountsChanged","_ref4","_callee4","_context4","toLowerCase","getAddress","_x3","on","Web3Provider","send","_ref3","_callee3","_context3","request","params","_x2","finally","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","_marked","submitHighScore","_marked2","blockchainSaga","invokeContract","_invokeContract","scoreboardContract","isEligible","minTopScore","tx","txReceipt","process","Wallet","addScore","_action$payload","takeEvery","moveSaga","watcherMoveSaga","gameSpeed","toString","put","delay","takeLatest","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","gameLogicReducer","blockchain","blockchainReducer","userReducer","nftReducer","middleware","getState","run","mainColor","augmentColor","createTheme","palette","theme","typography","fontFamily","join","customBtnColor","main","ReactDOM","createRoot","document","getElementById","render","StrictMode","ThemeProvider","Provider"],"mappings":"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","file":"static/js/main.ce037841.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/garden_snake.237d35f8.png\";","export const RIGHT = 'RIGHT';\nexport const LEFT = 'LEFT';\nexport const UP = 'UP';\nexport const DOWN = 'DOWN';\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './index';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { ObjectBody } from '../types';\n\nexport const GAME_HEIGHT = 600;\nexport const GAME_WIDTH = 600;\nexport const GAME_CHAR_PIXEL_HEIGHT = 20;\nexport const GAME_CHAR_PIXEL_WIDTH = 20;\nexport const NFT_CONTRACT = '0xB3a54BeBd28838c303c44f8fD7E1E5c7560a11F5';\nexport const LEADERBOARD_CONTRACT = '0x2f65d1142fB7577D8DE00fDA4De4a6A33e6CdD56';\n\nexport const clearBoard = (context: CanvasRenderingContext2D | null) => {\n  if (context) {\n    context.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n  }\n};\n\nexport const drawObject = (\n  context: CanvasRenderingContext2D | null,\n  objectBody: ObjectBody[],\n  fillColor: string,\n  strokeStyle = '#146356',\n) => {\n  if (context && objectBody.length > 0) {\n    objectBody.forEach((object: ObjectBody) => {\n      context.fillStyle = fillColor;\n      context.strokeStyle = strokeStyle;\n      context.beginPath();\n      context.arc(object.x, object.y, 10, 0, 2 * Math.PI);\n      context.fill();\n    });\n  }\n};\n\nexport const drawSnake = (\n  context: CanvasRenderingContext2D | null,\n  objectBody: ObjectBody[],\n  fillColor: string,\n  glowColor: string,\n) => {\n  if (context && objectBody.length > 0) {\n    objectBody.forEach((object: ObjectBody) => {\n      context.fillStyle = fillColor;\n      context.strokeStyle = fillColor;\n      context.beginPath();\n\n      context.arc(object.x, object.y, 9, 0, 2 * Math.PI);\n      context.shadowBlur = 10;\n      context.shadowColor = glowColor;\n      context.fill();\n      context.stroke();\n    });\n  }\n};\n\nfunction randomNumber(max: number) {\n  let random = Math.floor(Math.random() * max);\n  while (\n    random <= 0 ||\n    random < GAME_CHAR_PIXEL_WIDTH ||\n    random >= GAME_HEIGHT ||\n    random >= random + GAME_CHAR_PIXEL_HEIGHT\n  ) {\n    random = Math.floor(Math.random() * max);\n    random = random - (random % GAME_CHAR_PIXEL_HEIGHT); // remove the stray digits so that it is even\n  }\n  return random;\n}\n\nexport const generateRandomPosition = (width: number, height: number) => {\n  return {\n    x: randomNumber(width),\n    y: randomNumber(height),\n  };\n};\n\nexport const hasSnakeCollided = (snake: ObjectBody[], currentHeadPos: ObjectBody) => {\n  // check if snake collided with its own head\n  let flag = false;\n  snake.forEach((pos: ObjectBody, index: number) => {\n    if (pos.x === currentHeadPos.x && pos.y === currentHeadPos.y && index !== 0) {\n      flag = true;\n    }\n  });\n  return flag;\n};\n\nexport interface NetworkChain {\n  name: string;\n  rpc: string;\n  chainId: number;\n  chainIdHex: string;\n  currency: string;\n  explorer: string;\n  decimals: number;\n}\n\nexport const gameNetwork = {\n  name: 'Sepolia',\n  rpc: 'https://endpoints.omniatech.io/v1/eth/sepolia/public',\n  chainId: 11155111,\n  chainIdHex: '0xaa36a7',\n  currency: 'SepoliaETH',\n  explorer: 'https://sepolia.etherscan.io',\n  decimals: 18,\n} as NetworkChain;\n\nexport const automataTestnet = {\n  name: 'Automata Testnet',\n  rpc: 'https://1rpc.io/ata/testnet',\n  chainId: 1398243,\n  chainIdHex: '0x1555e3',\n  currency: 'ETH',\n  explorer: 'https://explorer.ata.network',\n  decimals: 18,\n} as NetworkChain;\n\nexport enum RARITY {\n  common = 'common',\n  uncommon = 'uncommon',\n  rare = 'rare',\n}\n\nexport const shortenAddress = (input: string, length = 7) => input.slice(0, length) + '...';\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const blockchainSlice = createSlice({\n  name: 'blockchain',\n  initialState: {},\n  reducers: {\n    SUBMIT_HIGH_SCORE(state, action) {},\n  },\n});\n\nexport const { SUBMIT_HIGH_SCORE } = blockchainSlice.actions;\n\nexport default blockchainSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { GAME_WIDTH, GAME_CHAR_PIXEL_WIDTH, GAME_HEIGHT } from '../utils';\n\n// center the snake at center of screen initially\nconst initialSnakeXPos = GAME_WIDTH / 2 - GAME_CHAR_PIXEL_WIDTH * 2;\nconst initialSnakeYPos = GAME_HEIGHT / 2;\n\nconst initialState = {\n  snake: [\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH * 4, y: initialSnakeYPos },\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH * 3, y: initialSnakeYPos },\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH * 2, y: initialSnakeYPos },\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH, y: initialSnakeYPos },\n    { x: initialSnakeXPos, y: initialSnakeYPos },\n  ],\n  disallowedDirection: '',\n  score: 0,\n  level: 1, // higher level = higher snake speed, see moveSaga.ts\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState: {\n    ...initialState,\n  },\n  reducers: {\n    MOVE_SNAKE: (state, action) => {\n      let newSnake = [\n        {\n          x: state.snake[0].x + action.payload.x,\n          y: state.snake[0].y + action.payload.y,\n        },\n        ...state.snake,\n      ];\n      // remove the last segment coordinates\n      newSnake.pop();\n\n      state.snake = newSnake;\n    },\n    SET_DIS_DIRECTION: (state, action) => {\n      state.disallowedDirection = action.payload;\n    },\n    INCREASE_SNAKE: (state) => {\n      console.log('increase snake');\n      // append a segment to the end of the snake\n      const snakeLen = state.snake.length;\n\n      state.snake = [\n        ...state.snake,\n        {\n          x: state.snake[snakeLen - 1].x - GAME_CHAR_PIXEL_WIDTH,\n          y: state.snake[snakeLen - 1].y - GAME_CHAR_PIXEL_WIDTH,\n        },\n      ];\n    },\n    LEVEL_UP: (state) => {\n      state.level = state.level + 1;\n    },\n    RESET_GAME_STATE: (state) => {\n      state.snake = [...initialState.snake];\n      state.disallowedDirection = initialState.disallowedDirection;\n      state.score = initialState.score;\n      state.level = initialState.level;\n    },\n    RESET_SCORE: (state) => {\n      state.score = 0;\n    },\n    INCREMENT_SCORE: (state) => {\n      state.score = state.score + 2;\n\n      if (state.score % 20 === 0) {\n        // every X points increase level\n        state.level = state.level + 1;\n      }\n    },\n    STOP_GAME() {},\n    RESET_GAME() {},\n    MOVE_SNAKE_EVENT(state, action) {},\n    MOVE_RIGHT_EVENT() {},\n    MOVE_LEFT_EVENT() {},\n    MOVE_UP_EVENT() {},\n    MOVE_DOWN_EVENT() {},\n  },\n});\n\nexport const {\n  MOVE_SNAKE,\n  SET_DIS_DIRECTION,\n  INCREASE_SNAKE,\n  RESET_GAME_STATE,\n  RESET_SCORE,\n  INCREMENT_SCORE,\n  STOP_GAME,\n  RESET_GAME,\n  MOVE_SNAKE_EVENT,\n  MOVE_RIGHT_EVENT,\n  MOVE_LEFT_EVENT,\n  MOVE_UP_EVENT,\n  MOVE_DOWN_EVENT,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import React from 'react';\nimport { Dialog } from '@mui/material';\nimport { useAppSelector } from '../../store/hooks';\n\ninterface GameOverModalProps {\n  open: boolean;\n}\n\nfunction GameOverModal(props: GameOverModalProps) {\n  const { open } = props;\n  const score = useAppSelector((state: any) => state.game.score);\n\n  return (\n    <Dialog\n      open={open}\n      hideBackdrop={true}\n      PaperProps={{\n        style: {\n          backgroundColor: 'transparent',\n          borderRadius: '14px',\n        },\n      }}\n    >\n      <div className=\"gameModalWrapper\">\n        <div className=\"gameOverTitle\">Game Over</div>\n        <div className=\"gameOverScoreWrapper\">\n          <div className=\"gameOverScoreTitle\">FINAL SCORE</div>\n          <div className=\"gameOverScore\">{score}</div>\n        </div>\n        <div>\n          Score automatically submitted.\n          <br />\n          Press 'r' to play again\n        </div>\n      </div>\n    </Dialog>\n  );\n}\n\nexport default GameOverModal;\n","import { Dialog } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { useAppSelector } from '../../store/hooks';\nimport { NFT_CONTRACT } from '../../utils';\nimport COMMON_SNAKE_DATA from '../../metadata/1.json';\nimport UNCOMMON_SNAKE_DATA from '../../metadata/2.json';\nimport RARE_SNAKE_DATA from '../../metadata/3.json';\nimport gardenSnake from '../../assets/garden_snake.png';\n\ninterface NFTDetailsModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\ninterface NFTAttributes {\n  trait_type: string;\n  value: string;\n}\n\ninterface NFTMetdata {\n  name: string;\n  description: string;\n  image: string;\n  external_url: string;\n  attributes: NFTAttributes[];\n}\n\nfunction NFTDetailsModal(props: NFTDetailsModalProps) {\n  const { open, onClose } = props;\n  const nftState = useAppSelector((state: any) => state.nft);\n  const [metadata, setMetadata] = useState<NFTMetdata>();\n  const [imageSrc, setImageSrc] = useState<any>();\n\n  useEffect(() => {\n    if (!nftState.tokenURI) {\n      return;\n    }\n\n    const tokenURIArray = nftState.tokenURI.split('/');\n    const lastPart = tokenURIArray[tokenURIArray.length - 1];\n    let json;\n\n    if (lastPart === '3.json') {\n      json = RARE_SNAKE_DATA;\n    } else if (lastPart === '2.json') {\n      json = UNCOMMON_SNAKE_DATA;\n    } else {\n      json = COMMON_SNAKE_DATA;\n    }\n    setMetadata({\n      name: json.name,\n      description: json.description,\n      image: json.image,\n      external_url: json.external_url,\n      attributes: JSON.parse(JSON.stringify(json.attributes)),\n    } as NFTMetdata);\n    setImageSrc(gardenSnake);\n  }, [nftState.tokenURI]);\n\n  return (\n    <Dialog\n      open={open}\n      PaperProps={{\n        style: {\n          backgroundColor: 'transparent',\n          borderRadius: '14px',\n        },\n      }}\n      onClose={onClose}\n    >\n      <div className=\"nftDetailsModalWrapper\">\n        <div>\n          {/* nft image */}\n          <img src={imageSrc} alt=\"nft image\" className=\"nftImageStyle\" />\n        </div>\n        <div className=\"nftContentWrapper\">\n          {/* nft details */}\n          <div>\n            <div className=\"nftDetailsTitle\">NFT</div>\n            <div>{NFT_CONTRACT}</div>\n          </div>\n          <div>\n            <div className=\"nftDetailsTitle\">TOKEN ID</div>\n            <div>#{nftState.tokenID}</div>\n          </div>\n          <div>\n            <div className=\"nftDetailsTitle\">RARITY</div>\n            <div className=\"nftRarity\">{nftState.rarity}</div>\n          </div>\n          <div>\n            <div className=\"nftDetailsTitle\">Description</div>\n            <div>{metadata && metadata.description}</div>\n          </div>\n        </div>\n      </div>\n    </Dialog>\n  );\n}\n\nexport default NFTDetailsModal;\n","import 'dotenv/config';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport '../App.css';\nimport { DOWN, LEFT, RIGHT, UP } from '../store/actions';\nimport { useAppSelector } from '../store/hooks';\nimport { ObjectBody } from '../types';\nimport {\n  clearBoard,\n  drawObject,\n  drawSnake,\n  GAME_CHAR_PIXEL_HEIGHT,\n  GAME_CHAR_PIXEL_WIDTH,\n  generateRandomPosition,\n  hasSnakeCollided,\n  RARITY,\n} from '../utils';\nimport { SUBMIT_HIGH_SCORE } from '../store/blockchainSlice';\nimport {\n  INCREASE_SNAKE,\n  INCREMENT_SCORE,\n  STOP_GAME,\n  RESET_GAME,\n  RESET_GAME_STATE,\n  MOVE_SNAKE_EVENT,\n  MOVE_RIGHT_EVENT,\n  MOVE_LEFT_EVENT,\n  MOVE_UP_EVENT,\n  MOVE_DOWN_EVENT,\n} from '../store/gameSlice';\nimport GameOverModal from './modal/gameOverModal';\nimport Button from '@mui/material/Button';\nimport NFTDetailsModal from './modal/nftDetailsModal';\n\ninterface CanvasBoardProps {\n  height: number;\n  width: number;\n}\n\nfunction CanvasBoard({ height, width }: CanvasBoardProps) {\n  const dispatch = useDispatch();\n  const score = useAppSelector((state: any) => state.game.score);\n  const playerSnake = useAppSelector((state: any) => state.game.snake);\n  const level = useAppSelector((state: any) => state.game.level);\n  const userState = useAppSelector((state: any) => state.user);\n  const nftState = useAppSelector((state: any) => state.nft);\n  const disallowedDirection = useAppSelector((state: any) => state.game.disallowedDirection);\n\n  const snakeColor = '#ffffff';\n  const snakeGlowColor = useMemo(() => {\n    return nftState.rarity === RARITY.common\n      ? '#00e676'\n      : nftState.rarity === RARITY.rare\n      ? '#ffff00'\n      : nftState.rarity === RARITY.uncommon\n      ? '#2979ff'\n      : '#000000';\n  }, [nftState]);\n\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\n  const [foodPosition, setFoodPosition] = useState<ObjectBody>(\n    generateRandomPosition(width - GAME_CHAR_PIXEL_WIDTH, height - GAME_CHAR_PIXEL_HEIGHT),\n  );\n  const [isConsumed, setIsConsumed] = useState<boolean>(false);\n  const [gameEnded, setGameEnded] = useState<boolean>(false);\n  const [openNFTModal, setOpenNFTModal] = useState<boolean>(false);\n\n  // ds = direction not allowed\n  const moveSnake = useCallback(\n    (dx = 0, dy = 0, ds: string, dlevel: number) => {\n      if (dx > 0 && dy === 0 && ds !== RIGHT) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_RIGHT_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n\n      if (dx < 0 && dy === 0 && ds !== LEFT) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_LEFT_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n\n      if (dx === 0 && dy < 0 && ds !== UP) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_UP_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n\n      if (dx === 0 && dy > 0 && ds !== DOWN) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_DOWN_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n    },\n    [dispatch],\n  );\n\n  const handleKeyEvents = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'w':\n          !gameEnded && moveSnake(0, -20, disallowedDirection, level);\n          break;\n        case 's':\n          !gameEnded && moveSnake(0, 20, disallowedDirection, level);\n          break;\n        case 'a':\n          if (!disallowedDirection) {\n            // prevent users from moving the opposite direction (left)\n            // at the start of the game\n            event.preventDefault();\n            break;\n          }\n          !gameEnded && moveSnake(-20, 0, disallowedDirection, level);\n          break;\n        case 'd':\n          !gameEnded && moveSnake(20, 0, disallowedDirection, level);\n          break;\n      }\n    },\n    [disallowedDirection, level, gameEnded, moveSnake],\n  );\n\n  const isOutOfBoundary = (snake: any) => {\n    return snake[0].x >= width || snake[0].x <= 0 || snake[0].y <= 0 || snake[0].y >= height;\n  };\n\n  useEffect(() => {\n    // snake eat the food\n    const newFoodPosition = generateRandomPosition(width - GAME_CHAR_PIXEL_WIDTH, height - GAME_CHAR_PIXEL_HEIGHT);\n\n    if (isConsumed && foodPosition !== newFoodPosition) {\n      setFoodPosition(newFoodPosition);\n      setIsConsumed(false);\n      dispatch(INCREASE_SNAKE());\n      dispatch(INCREMENT_SCORE());\n    }\n  }, [isConsumed, foodPosition, width, height]);\n\n  useEffect(() => {\n    if (userState.nftBalance !== 1) {\n      // only load snake if user has connect wallet\n      return;\n    }\n\n    // draw on canvas each time\n    setContext(canvasRef.current && canvasRef.current.getContext('2d'));\n    clearBoard(context);\n\n    // render snake\n    playerSnake && drawSnake(context, playerSnake, snakeColor, snakeGlowColor);\n\n    // render food\n    drawObject(context, [foodPosition], '#ffffff');\n  }, [context, playerSnake, foodPosition, userState.nftBalance]);\n\n  useEffect(() => {\n    const xDiff = Math.abs(playerSnake[0].x - foodPosition.x);\n    const yDiff = Math.abs(playerSnake[1].y - foodPosition.y);\n\n    // difference of position might be off a little\n    // when food is consumed\n    if (xDiff <= 18 && yDiff <= 18 && !isConsumed) {\n      // require isConsumed variable to prevent double counting\n      setIsConsumed(true);\n    }\n  }, [playerSnake, foodPosition, isConsumed]);\n\n  useEffect(() => {\n    // check boundaries and collision\n    if (hasSnakeCollided(playerSnake, playerSnake[0]) || isOutOfBoundary(playerSnake)) {\n      console.log('game ends');\n      setGameEnded(true);\n      dispatch(STOP_GAME());\n      window.removeEventListener('keypress', handleKeyEvents);\n    } else {\n      setGameEnded(false);\n    }\n  }, [playerSnake, dispatch, handleKeyEvents]);\n\n  const handleResetBoard = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'r':\n          // resetBoard;\n          setGameEnded(false);\n          dispatch(RESET_GAME());\n          dispatch(RESET_GAME_STATE());\n          clearBoard(context);\n\n          // render snake\n          playerSnake && drawSnake(context, playerSnake, snakeColor, snakeGlowColor);\n\n          // render food\n          const newFoodPosition = generateRandomPosition(\n            width - GAME_CHAR_PIXEL_WIDTH,\n            height - GAME_CHAR_PIXEL_HEIGHT,\n          );\n          setFoodPosition(newFoodPosition);\n      }\n    },\n    [context, dispatch, height, width, playerSnake],\n  );\n\n  useEffect(() => {\n    if (!userState || (userState && !userState.isConnected && userState.nftBalance <= 0)) {\n      return;\n    }\n\n    // key input\n    window.addEventListener('keypress', handleKeyEvents);\n    window.addEventListener('keypress', handleResetBoard);\n\n    return () => {\n      window.removeEventListener('keypress', handleKeyEvents);\n      window.removeEventListener('keypress', handleResetBoard);\n    };\n  }, [disallowedDirection, handleKeyEvents, userState.isConnected]);\n\n  useEffect(() => {\n    if (gameEnded) {\n      dispatch(\n        SUBMIT_HIGH_SCORE({\n          wallet: `${userState.wallet}`,\n          score: `${score}`,\n        }),\n      );\n    }\n  }, [gameEnded]);\n\n  return (\n    <div className=\"mainCanvasWrapper\">\n      <canvas\n        ref={canvasRef}\n        className={gameEnded ? 'canvasWrapperGameEnd' : 'canvasWrapper'}\n        height={height}\n        width={width}\n      />\n      <div className=\"instructionWrapper\">\n        <div>Controls: W,S,A,D to move - R to reset</div>\n        <Button\n          variant=\"outlined\"\n          onClick={() => setOpenNFTModal(true)}\n          sx={{\n            color: '#fafafa',\n            fontSize: '1rem',\n            fontWeight: 700,\n            borderRadius: '10px',\n          }}\n        >\n          View NFT\n        </Button>\n      </div>\n      <GameOverModal open={gameEnded} />\n      <NFTDetailsModal open={openNFTModal} onClose={() => setOpenNFTModal(false)} />\n    </div>\n  );\n}\n\nexport default CanvasBoard;\n","import { ethers } from 'ethers';\nimport React from 'react';\nimport useSWR from 'swr';\nimport { gameNetwork, LEADERBOARD_CONTRACT, shortenAddress } from '../utils';\nimport Leaderboard_ABI from '../abis/Leaderboard_ABI.json';\nimport Blockies from 'react-blockies';\n\ninterface Player {\n  address: string;\n  score: number;\n}\n\n/**\n * ranking board contract tracks top 10\n * but in case 1rpc rate limit, we fetch only 3\n */\nconst MAX_TOP_PLAYER_COUNT = 10;\n\nconst fetchRanking = async (key: string) => {\n  console.log('fetching ranking');\n  let data: Player[] = [];\n\n  const provider = new ethers.providers.JsonRpcProvider(gameNetwork.rpc);\n  const rankingContract = new ethers.Contract(LEADERBOARD_CONTRACT, Leaderboard_ABI, provider);\n\n  try {\n    for (let i = 0; i < MAX_TOP_PLAYER_COUNT; i++) {\n      const player = await rankingContract.leaderboard(i);\n      if (player.player === '0x0000000000000000000000000000000000000000') {\n        // leader board is empty\n        break;\n      }\n      data.push({\n        address: player.player,\n        score: player.score.toNumber(),\n      } as Player);\n    }\n  } catch (err) {\n    console.log('error fetching ranking: ', err);\n  }\n\n  return data;\n};\n\nfunction RankingBoard() {\n  const { data, error, isLoading } = useSWR('fetch_ranking', fetchRanking, { refreshInterval: 60000 });\n\n  return (\n    <div className=\"rankingBoardWrapper\">\n      <div>TOP {MAX_TOP_PLAYER_COUNT} PLAYERS</div>\n      {!data || isLoading ? (\n        <p>Loading...</p>\n      ) : data ? (\n        <div className=\"rankingContentWrapper\">\n          {data.length === 0 && <div>No highscores.</div>}\n          {data.map((player, index) => {\n            return (\n              <div className=\"rankCard\" key={index}>\n                <div className=\"rankInfo\">\n                  {index + 1}\n                  <Blockies\n                    seed={player.address}\n                    size={10}\n                    scale={3}\n                    color=\"#8ed1fb\"\n                    bgColor=\"#5272f2\"\n                    spotColor=\"#aedefc\"\n                    className=\"avatar\"\n                  />\n                  {shortenAddress(player.address)}\n                </div>\n                <div>{player.score}</div>\n              </div>\n            );\n          })}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default RankingBoard;\n","import React from 'react';\nimport { useAppSelector } from '../store/hooks';\n\nfunction ScoreCard() {\n  // const score = useSelector((state: any) => (state.gameReducer as GameState).score);\n  const score = useAppSelector((state: any) => state.game.score);\n  return (\n    <div className=\"scoreWrapper\">\n      <div className=\"scoreTitle\">SCORE</div>\n      <div className=\"scoreValue\">{score}</div>\n    </div>\n  );\n}\n\nexport default ScoreCard;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  tokenURI: '',\n  tokenID: '',\n  rarity: '',\n};\n\nexport const nftSlice = createSlice({\n  name: 'nft',\n  initialState: {\n    ...initialState,\n  },\n  reducers: {\n    UPDATE_TOKEN_URI: (state, action) => {\n      state.tokenURI = action.payload;\n    },\n    UPDATE_TOKEN_ID: (state, action) => {\n      state.tokenID = action.payload;\n    },\n    UPDATE_RARITY: (state, action) => {\n      state.rarity = action.payload;\n    },\n    RESET: (state) => {\n      state = initialState;\n    },\n  },\n});\n\nexport const { UPDATE_TOKEN_URI, UPDATE_TOKEN_ID, UPDATE_RARITY } = nftSlice.actions;\n\nexport default nftSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  balance: '0',\n  nftBalance: 0,\n  wallet: '',\n  isConnected: false,\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    ...initialState,\n  },\n  reducers: {\n    UPDATE_BALANCE: (state, action) => {\n      state.balance = action.payload;\n    },\n    UPDATE_NFT_BALANCE: (state, action) => {\n      state.nftBalance = action.payload;\n    },\n    UPDATE_WALLET: (state, action) => {\n      state.wallet = action.payload;\n    },\n    UPDATE_IS_CONNECTED: (state, action) => {\n      state.isConnected = action.payload;\n    },\n    USER_RESET: (state) => {\n      state = initialState;\n    },\n  },\n});\n\nexport const { UPDATE_BALANCE, UPDATE_NFT_BALANCE, UPDATE_WALLET, UPDATE_IS_CONNECTED, USER_RESET } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import type { ExternalProvider } from '@ethersproject/providers';\n\nexport interface MetaMaskHolder {\n  ethereum?: ExternalProvider;\n}\n\nconst maybeEthereum = typeof window !== 'undefined' && (window as any).ethereum;\nexport const metaMask = maybeEthereum ? (maybeEthereum as Required<ExternalProvider>) : null;\n","import React, { useEffect } from 'react';\nimport { Button, CircularProgress, Dialog } from '@mui/material';\nimport { useAppSelector } from '../../store/hooks';\nimport { metaMask } from '../../utils/metamask';\n\ninterface StartScreenModalProps {\n  open: boolean;\n  isStarting: boolean;\n  isMinting: boolean;\n  setIsMinting: React.Dispatch<React.SetStateAction<boolean>>;\n  onConnectWallet: () => void;\n  mintNFT: () => Promise<void>;\n}\n\nfunction StartScreenModal(props: StartScreenModalProps) {\n  const { open, isStarting, isMinting, onConnectWallet, mintNFT, setIsMinting } = props;\n  const userState = useAppSelector((state) => state.user);\n\n  if (userState && userState.isConnected && userState.nftBalance > 0) {\n    // hide start screen if user has nft\n    return <></>;\n  }\n\n  return (\n    <Dialog\n      open={open}\n      hideBackdrop={true}\n      PaperProps={{\n        style: {\n          backgroundColor: 'transparent',\n          borderRadius: '14px',\n        },\n      }}\n      className=\"startScreenModal\"\n    >\n      <div className=\"modalWrapper\">\n        <div className=\"menu-title\">Snake</div>\n        <div className=\"modalContentWrapper\">\n          <p>Welcome to the traditional snake game.</p>\n          {!metaMask ? (\n            <>\n              <div>This game requires Metamask to play.</div>\n              <div>Please install Metamask to continue.</div>\n              <Button\n                variant=\"contained\"\n                color=\"customBtnColor\"\n                href=\"https://metamask.io/download\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                sx={{\n                  color: '#fafafa',\n                  fontSize: '1rem',\n                  fontWeight: 700,\n                  borderRadius: '10px',\n                }}\n              >\n                Install Metamask\n              </Button>\n            </>\n          ) : userState.isConnected ? (\n            userState.nftBalance > 0 ? null : (\n              <>\n                <div>This game requires you to mint a NFT to proceed.</div>\n                <div>\n                  Get some Sepolia ETH from{' '}\n                  <a href=\"https://sepoliafaucet.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    https://sepoliafaucet.io/\n                  </a>\n                </div>\n                <div>\n                  Click <strong>Mint NFT</strong> to mint a Snake.\n                </div>\n                <div>Wait for the trasaction to finish and you may begin the game.</div>\n                <Button\n                  variant=\"contained\"\n                  color=\"customBtnColor\"\n                  onClick={async () => {\n                    try {\n                      setIsMinting(true);\n                      await mintNFT();\n                    } catch (e) {\n                      console.log(e);\n                    } finally {\n                      setIsMinting(false);\n                    }\n                  }}\n                  sx={{\n                    color: '#fafafa',\n                    fontSize: '1rem',\n                    fontWeight: 700,\n                    borderRadius: '10px',\n                  }}\n                  disabled={isMinting}\n                >\n                  {isMinting && (\n                    <>\n                      <CircularProgress size={14} />\n                      <>&nbsp;</>\n                    </>\n                  )}{' '}\n                  Mint NFT\n                </Button>\n              </>\n            )\n          ) : (\n            /* user has metamask, connect wallet to proceed */\n            <>\n              <div>\n                1. Click <strong>Start Game</strong> and connect with your Metamask wallet.\n              </div>\n              <div>2. Approve and switch the network on Metamask.</div>\n              <div>3. Your network will be set to Sepolia Testnet.</div>\n              <div>\n                Toggle <strong>Show test networks</strong> on Metamask if the Metamask does not prompt for the switch.\n              </div>\n              <Button\n                variant=\"contained\"\n                color=\"customBtnColor\"\n                onClick={onConnectWallet}\n                disableElevation={true}\n                sx={{\n                  color: '#fafafa',\n                  fontSize: '1rem',\n                  fontWeight: 700,\n                  borderRadius: '10px',\n                }}\n                disabled={isStarting}\n              >\n                {isStarting && (\n                  <>\n                    <CircularProgress size={14} />\n                    <>&nbsp;</>\n                  </>\n                )}{' '}\n                Start Game\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n    </Dialog>\n  );\n}\n\nexport default StartScreenModal;\n","import { ethers } from 'ethers';\nimport React, { useEffect, useState } from 'react';\nimport NFTABI from './abis/NFTABI.json';\nimport NFTNoVRFABI from './abis/NFTNoVRFABI.json';\nimport './App.css';\nimport CanvasBoard from './components/canvasboard';\nimport RankingBoard from './components/rankingboard';\nimport ScoreCard from './components/score';\nimport COMMON_SNAKE_DATA from './metadata/1.json';\nimport UNCOMMON_SNAKE_DATA from './metadata/2.json';\nimport RARE_SNAKE_DATA from './metadata/3.json';\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { UPDATE_RARITY, UPDATE_TOKEN_ID, UPDATE_TOKEN_URI } from './store/nftSlice';\nimport { UPDATE_BALANCE, UPDATE_IS_CONNECTED, UPDATE_NFT_BALANCE, UPDATE_WALLET } from './store/userSlice';\nimport { gameNetwork, GAME_HEIGHT, GAME_WIDTH, NFT_CONTRACT, shortenAddress } from './utils';\nimport StartScreenModal from './components/modal/startScreenModal';\nimport { metaMask } from './utils/metamask';\n\nlet signerProvider: ethers.providers.Web3Provider;\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  const userState = useAppSelector((state) => state.user);\n  const gameState = useAppSelector((state) => state.game);\n  const [isMinting, setIsMinting] = useState(false);\n  const [isStarting, setIsStarting] = useState(false);\n  const [openStartScreen, setOpenStartScreen] = useState(true);\n\n  const updateWalletBalance = (accounts: any) => {\n    if (signerProvider && accounts.length) {\n      signerProvider.getBalance(accounts[0]).then((result: any) => {\n        const bal = ethers.utils.formatEther(result);\n        dispatch(UPDATE_BALANCE(bal));\n      });\n    }\n  };\n\n  const mintNFT = async () => {\n    if (!signerProvider) {\n      return;\n    }\n\n    const signer = signerProvider.getSigner();\n    const nftContract = new ethers.Contract(NFT_CONTRACT, NFTABI, signer);\n    const mintTx = await nftContract.safeMint();\n    const mintTxReceipt = await mintTx.wait();\n\n    if (mintTxReceipt && mintTxReceipt.status === 1) {\n      await fetchNFT(userState.wallet);\n    }\n  };\n\n  const fetchNFT = async (wallet: string) => {\n    let rpcProvider: ethers.providers.JsonRpcProvider = new ethers.providers.JsonRpcProvider(gameNetwork.rpc);\n    const nftContract = new ethers.Contract(NFT_CONTRACT, NFTNoVRFABI, rpcProvider);\n    const nftBalance = await nftContract.balanceOf(wallet);\n\n    if (nftBalance.toNumber() > 0) {\n      try {\n        const tokenId = await nftContract.getTokenID(wallet);\n\n        if (!tokenId) {\n          return;\n        }\n\n        const tokenURI = await nftContract.tokenURI(tokenId);\n\n        // read token URI and save nft info\n        // should do this from a db or directly via IPFS\n        // ipfs url is https://<gateway>/ipfs/<CID>/<num>.json\n        const tokenURIArray = tokenURI.split('/');\n        const lastPart = tokenURIArray[tokenURIArray.length - 1];\n        let rarity;\n        let json;\n\n        if (lastPart === '3.json') {\n          json = RARE_SNAKE_DATA;\n        } else if (lastPart === '2.json') {\n          json = UNCOMMON_SNAKE_DATA;\n        } else {\n          json = COMMON_SNAKE_DATA;\n        }\n\n        rarity = json.attributes[0].trait_type === 'Rarity' && json.attributes[0].value;\n\n        console.log('token id: ', tokenId.toNumber());\n        console.log('token uri: ', tokenURI);\n        console.log('rarity: ', rarity);\n\n        dispatch(UPDATE_NFT_BALANCE(nftBalance.toNumber()));\n        dispatch(UPDATE_TOKEN_ID(tokenId.toNumber()));\n        dispatch(UPDATE_TOKEN_URI(tokenURI));\n        dispatch(UPDATE_RARITY(rarity));\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  };\n\n  const onConnectWallet = () => {\n    if (!window.ethereum) {\n      console.log('Please install Metamask');\n      return;\n    }\n\n    setIsStarting(true);\n\n    signerProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // MetaMask requires requesting permission to connect users accounts\n    signerProvider\n      .send('eth_requestAccounts', [])\n      .then(async (accounts: any) => {\n        if (accounts.length > 0) {\n          try {\n            await (signerProvider.provider as any).request({\n              method: 'wallet_switchEthereumChain',\n              params: [\n                {\n                  chainId: gameNetwork.chainIdHex,\n                },\n              ],\n            });\n\n            const address = ethers.utils.getAddress(accounts[0]);\n\n            await fetchNFT(address);\n            dispatch(UPDATE_WALLET(address));\n            dispatch(UPDATE_IS_CONNECTED(true));\n            updateWalletBalance(accounts);\n          } catch (err) {\n            console.error(err);\n          }\n        }\n      })\n      .catch((e: any) => console.error(e))\n      .finally(() => {\n        setIsStarting(false);\n      });\n  };\n\n  const handleAccountsChanged = async (accounts: any) => {\n    if (accounts.length === 0) {\n      console.log('Please connect to Metamask');\n    } else if (accounts[0].toLowerCase() !== userState.wallet.toLowerCase()) {\n      const address = ethers.utils.getAddress(accounts[0]);\n      dispatch(UPDATE_NFT_BALANCE(0));\n      dispatch(UPDATE_TOKEN_ID(''));\n      dispatch(UPDATE_TOKEN_URI(''));\n      dispatch(UPDATE_RARITY(''));\n      await fetchNFT(address);\n      dispatch(UPDATE_WALLET(address));\n      updateWalletBalance(accounts);\n    }\n    setIsMinting(false);\n    setIsStarting(false);\n  };\n\n  useEffect(() => {\n    if (!metaMask) {\n      return;\n    }\n    window.ethereum.on('accountsChanged', handleAccountsChanged);\n  }, []);\n\n  useEffect(() => {\n    if (userState && userState.isConnected && userState.nftBalance > 0) {\n      setOpenStartScreen(false);\n    } else if (userState.wallet) {\n      // change account\n      // open the startscreen modal\n      setOpenStartScreen(true);\n    }\n  }, [userState]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"gameScreenWrapper\">\n        <div className=\"mainBoardWrapper\">\n          <div className=\"header\">\n            <div className=\"walletInfoWrapper\">\n              <div className=\"walletTitle\">LEVEL</div>\n              <div className=\"walletValue\">{gameState.level}</div>\n            </div>\n            <ScoreCard />\n            <div className=\"walletInfoWrapper\">\n              <div className=\"walletTitle\">WALLET</div>\n              <div className=\"walletValue\">{shortenAddress(userState.wallet)}</div>\n            </div>\n          </div>\n          <CanvasBoard height={GAME_HEIGHT} width={GAME_WIDTH} />\n        </div>\n        <RankingBoard />\n      </div>\n      <StartScreenModal\n        open={openStartScreen}\n        isStarting={isStarting}\n        isMinting={isMinting}\n        setIsMinting={setIsMinting}\n        onConnectWallet={onConnectWallet}\n        mintNFT={mintNFT}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'dotenv/config';\nimport { ethers } from 'ethers';\nimport { call, takeEvery } from 'redux-saga/effects';\nimport { gameNetwork, LEADERBOARD_CONTRACT } from '../../utils';\nimport { SUBMIT_HIGH_SCORE } from '../blockchainSlice';\nimport Leaderboard_ABI from '../../abis/Leaderboard_ABI.json';\n\nasync function invokeContract(wallet: string, score: number) {\n  const deployerKey = process.env.REACT_APP_LEADERBOARD_PK || '';\n  const provider = new ethers.providers.JsonRpcProvider(gameNetwork.rpc);\n  const signer = new ethers.Wallet(deployerKey, provider);\n  const scoreboardContract = new ethers.Contract(LEADERBOARD_CONTRACT, Leaderboard_ABI, signer);\n\n  try {\n    let isEligible = false;\n    // always fetch the 10th player in the ranking board\n    const minTopScore = await scoreboardContract.leaderboard(9);\n\n    if (minTopScore.player === '0x0000000000000000000000000000000000000000') {\n      isEligible = true;\n    } else if (minTopScore.score.toNumber() < score) {\n      isEligible = true;\n    }\n\n    if (isEligible) {\n      const tx = await scoreboardContract.addScore(`${wallet}`, `${score}`);\n      const txReceipt = await tx.wait();\n\n      if (txReceipt && txReceipt.status === 1) {\n        console.log('score updated: ', tx);\n      }\n    }\n  } catch (e) {\n    console.log('error submitting highscore: ', e);\n  }\n}\n\n/**\n * listen to submit high score from dispatch and call contract\n */\nfunction* submitHighScore(action: any) {\n  console.log('submit high score');\n  // submit highscore using deployer wallet\n  const deployerKey = process.env.REACT_APP_LEADERBOARD_PK || '';\n  const { wallet, score } = action.payload;\n\n  if (!deployerKey || score <= 0) {\n    console.error('Deployer wallet not configure');\n    return;\n  }\n\n  yield call(invokeContract, wallet, score);\n}\n\nfunction* blockchainSaga() {\n  yield takeEvery(SUBMIT_HIGH_SCORE, submitHighScore);\n}\n\nexport default blockchainSaga;\n","import { delay, put, takeLatest } from 'redux-saga/effects';\nimport { DOWN, LEFT, RIGHT, UP } from '../actions';\nimport {\n  MOVE_DOWN_EVENT,\n  MOVE_LEFT_EVENT,\n  MOVE_RIGHT_EVENT,\n  MOVE_SNAKE,\n  MOVE_SNAKE_EVENT,\n  MOVE_UP_EVENT,\n  RESET_GAME,\n  SET_DIS_DIRECTION,\n  STOP_GAME,\n} from '../gameSlice';\n\nexport function* moveSaga(actions: any) {\n  // keep looping to move the snake\n  while (actions.type !== RESET_GAME.toString() && actions.type !== STOP_GAME.toString()) {\n    // run the snake\n    yield put(\n      MOVE_SNAKE({\n        x: actions.payload.x,\n        y: actions.payload.y,\n      }),\n    );\n\n    // set the invalid direction\n    // invalid direction is always opposite\n    switch (actions.payload.direction.type.toString()) {\n      case `${MOVE_RIGHT_EVENT}`:\n        yield put(SET_DIS_DIRECTION(LEFT));\n        break;\n      case `${MOVE_LEFT_EVENT}`:\n        yield put(SET_DIS_DIRECTION(RIGHT));\n        break;\n      case `${MOVE_UP_EVENT}`:\n        yield put(SET_DIS_DIRECTION(DOWN));\n        break;\n      case `${MOVE_DOWN_EVENT}`:\n        yield put(SET_DIS_DIRECTION(UP));\n        break;\n    }\n\n    let gameSpeed = 100; // lower number = faster\n    if (actions.payload.level) {\n      const level = actions.payload.level;\n      if (level === 1) {\n        gameSpeed = 100;\n      } else if (level === 2) {\n        gameSpeed = 90;\n      } else if (level === 3) {\n        gameSpeed = 80;\n      } else if (level === 4) {\n        gameSpeed = 70;\n      } else if (level === 5) {\n        gameSpeed = 60;\n      } else if (level > 5) {\n        gameSpeed = 50;\n      } else if (level > 9) {\n        gameSpeed = 40;\n      }\n    }\n    yield delay(gameSpeed);\n  }\n}\n\nexport function* watcherMoveSaga() {\n  yield takeLatest([MOVE_SNAKE_EVENT, RESET_GAME, STOP_GAME], moveSaga);\n}\n","import { all } from 'redux-saga/effects';\nimport blockchainSaga from './blockchainSaga';\nimport { watcherMoveSaga } from './moveSaga';\n\nexport function* rootSaga() {\n  yield all([blockchainSaga(), watcherMoveSaga()]);\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport userReducer from './userSlice';\nimport nftReducer from './nftSlice';\nimport blockchainReducer from './blockchainSlice';\nimport gameLogicReducer from './gameSlice';\nimport { rootSaga } from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    game: gameLogicReducer,\n    blockchain: blockchainReducer,\n    user: userReducer,\n    nft: nftReducer,\n  },\n  middleware: [sagaMiddleware],\n});\n\nconsole.log(store.getState());\n\nsagaMiddleware.run(rootSaga);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport { createTheme, ThemeProvider } from '@mui/material';\n\nconst { palette } = createTheme();\nconst { augmentColor } = palette;\nconst createColor = (mainColor: string) => augmentColor({ color: { main: mainColor } });\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: ['Play', 'sans-serif'].join(','),\n  },\n  palette: {\n    customBtnColor: createColor('#0284ff'),\n  },\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}