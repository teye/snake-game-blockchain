{"version":3,"sources":["assets/garden_snake.png","assets/viper.png","assets/king_cobra.png","store/actions/index.ts","store/hooks.ts","utils/index.ts","store/blockchainSlice.ts","store/gameSlice.ts","components/modal/gameOverModal.tsx","components/clipboard-btn.tsx","components/modal/nftDetailsModal.tsx","components/canvasboard.tsx","components/rankingboard.tsx","components/score.tsx","store/nftSlice.ts","store/userSlice.ts","utils/metamask.ts","components/modal/startScreenModal.tsx","App.tsx","reportWebVitals.ts","store/sagas/blockchainSaga.ts","store/sagas/moveSaga.ts","store/sagas/index.ts","store/index.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","RIGHT","LEFT","UP","DOWN","useAppDispatch","useDispatch","useAppSelector","useSelector","GAME_HEIGHT","GAME_WIDTH","GAME_CHAR_PIXEL_HEIGHT","GAME_CHAR_PIXEL_WIDTH","NFT_CONTRACT","LEADERBOARD_CONTRACT","clearBoard","context","clearRect","drawObject","objectBody","fillColor","strokeStyle","arguments","length","undefined","forEach","object","fillStyle","beginPath","arc","x","y","Math","PI","fill","drawSnake","glowColor","shadowBlur","shadowColor","stroke","randomNumber","max","random","floor","generateRandomPosition","width","height","hasSnakeCollided","snake","currentHeadPos","flag","pos","index","gameNetwork","name","rpc","chainId","chainIdHex","currency","explorer","decimals","gameNetworkProvider","ethers","providers","StaticJsonRpcProvider","RARITY","shortenAddress","input","slice","blockchainSlice","createSlice","initialState","reducers","SUBMIT_HIGH_SCORE","state","action","actions","initialSnakeXPos","initialSnakeYPos","disallowedDirection","score","level","gameSlice","_objectSpread","MOVE_SNAKE","newSnake","payload","concat","_toConsumableArray","pop","SET_DIS_DIRECTION","INCREASE_SNAKE","console","log","snakeLen","LEVEL_UP","RESET_GAME_STATE","RESET_SCORE","INCREMENT_SCORE","STOP_GAME","RESET_GAME","MOVE_SNAKE_EVENT","MOVE_RIGHT_EVENT","MOVE_LEFT_EVENT","MOVE_UP_EVENT","MOVE_DOWN_EVENT","_gameSlice$actions","GameOverModal","props","open","game","React","createElement","Dialog","hideBackdrop","PaperProps","style","backgroundColor","borderRadius","className","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","GeneratorFunction","GeneratorFunctionPrototype","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","ClipboardButton","_ref","copyText","_useState","useState","_useState2","_slicedToArray","isCopied","setIsCopied","_copyTextToClipboard","_asyncToGenerator","_callee","text","_context","navigator","clipboard","writeText","document","execCommand","apply","onClick","_x","copyTextToClipboard","setTimeout","err","CheckCircleIcon","DocumentDuplicateIcon","NFTDetailsModal","onClose","nftState","nft","metadata","setMetadata","_useState3","_useState4","imageSrc","setImageSrc","useEffect","tokenURI","json","tokenURIArray","split","lastPart","RARE_SNAKE_DATA","kingCobra","UNCOMMON_SNAKE_DATA","viper","COMMON_SNAKE_DATA","gardenSnake","description","image","external_url","attributes","JSON","parse","stringify","XMarkIcon","src","alt","tokenID","rarity","CanvasBoard","dispatch","playerSnake","userState","user","snakeGlowColor","useMemo","common","rare","uncommon","canvasRef","useRef","setContext","foodPosition","setFoodPosition","_useState5","_useState6","isConsumed","setIsConsumed","_useState7","_useState8","gameEnded","setGameEnded","_useState9","_useState10","openNFTModal","setOpenNFTModal","moveSnake","useCallback","dx","dy","ds","dlevel","direction","handleKeyEvents","event","key","preventDefault","newFoodPosition","nftBalance","current","getContext","xDiff","abs","yDiff","window","removeEventListener","handleResetBoard","isConnected","addEventListener","wallet","ref","Button","variant","sx","color","fontSize","fontWeight","_createForOfIteratorHelper","allowArrayLike","it","Array","isArray","minLen","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","F","_e","normalCompletion","didErr","step","_e2","arr","len","arr2","MAX_TOP_PLAYER_COUNT","fetchRanking","data","multicall","rankingContract","calls","scoresList","_iterator","_step","player","MulticallWrapper","Contract","Leaderboard_ABI","leaderboard","all","address","toNumber","t0","RankingBoard","_useSWR","useSWR","refreshInterval","revalidateOnFocus","isLoading","error","map","Blockies","seed","size","scale","bgColor","spotColor","ScoreCard","nftSlice","UPDATE_TOKEN_URI","UPDATE_TOKEN_ID","UPDATE_RARITY","RESET","_nftSlice$actions","balance","userSlice","UPDATE_BALANCE","UPDATE_NFT_BALANCE","UPDATE_WALLET","UPDATE_IS_CONNECTED","USER_RESET","_userSlice$actions","maybeEthereum","ethereum","metaMask","StartScreenModal","signerProvider","isStarting","isMinting","onConnectWallet","mintNFT","setIsMinting","Fragment","href","target","rel","disabled","CircularProgress","disableElevation","App","gameState","setIsStarting","openStartScreen","setOpenStartScreen","updateWalletBalance","accounts","getBalance","result","bal","utils","formatEther","signer","nftContract","mintTx","mintTxReceipt","getSigner","NFTNoVRFABI","safeMint","wait","status","fetchNFT","_ref2","_callee2","tokenId","_context2","balanceOf","getTokenID","trait_type","handleAccountsChanged","_ref4","_callee4","_context4","toLowerCase","getAddress","_x3","on","Web3Provider","send","_ref3","_callee3","_context3","provider","request","params","_x2","finally","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","_marked","submitHighScore","_marked2","blockchainSaga","invokeContract","_invokeContract","scoreboardContract","isEligible","minTopScore","tx","txReceipt","process","Wallet","addScore","_action$payload","takeEvery","moveSaga","watcherMoveSaga","gameSpeed","put","delay","takeLatest","rootSaga","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","gameLogicReducer","blockchain","blockchainReducer","userReducer","nftReducer","middleware","getState","run","mainColor","augmentColor","createTheme","palette","theme","typography","fontFamily","join","customBtnColor","main","ReactDOM","createRoot","getElementById","render","StrictMode","ThemeProvider","Provider"],"mappings":"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","file":"static/js/main.f299cb2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/garden_snake.237d35f8.png\";","module.exports = __webpack_public_path__ + \"static/media/viper.d0dc6517.png\";","module.exports = __webpack_public_path__ + \"static/media/king_cobra.5d95b8fb.png\";","export const RIGHT = 'RIGHT';\nexport const LEFT = 'LEFT';\nexport const UP = 'UP';\nexport const DOWN = 'DOWN';\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './index';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { ethers } from 'ethers';\nimport { ObjectBody } from '../types';\n\nexport const GAME_HEIGHT = 600;\nexport const GAME_WIDTH = 600;\nexport const GAME_CHAR_PIXEL_HEIGHT = 20;\nexport const GAME_CHAR_PIXEL_WIDTH = 20;\nexport const NFT_CONTRACT = '0xB3a54BeBd28838c303c44f8fD7E1E5c7560a11F5';\nexport const LEADERBOARD_CONTRACT = '0x2f65d1142fB7577D8DE00fDA4De4a6A33e6CdD56';\n\nexport const clearBoard = (context: CanvasRenderingContext2D | null) => {\n  if (context) {\n    context.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n  }\n};\n\nexport const drawObject = (\n  context: CanvasRenderingContext2D | null,\n  objectBody: ObjectBody[],\n  fillColor: string,\n  strokeStyle = '#146356',\n) => {\n  if (context && objectBody.length > 0) {\n    objectBody.forEach((object: ObjectBody) => {\n      context.fillStyle = fillColor;\n      context.strokeStyle = strokeStyle;\n      context.beginPath();\n      context.arc(object.x, object.y, 10, 0, 2 * Math.PI);\n      context.fill();\n    });\n  }\n};\n\nexport const drawSnake = (\n  context: CanvasRenderingContext2D | null,\n  objectBody: ObjectBody[],\n  fillColor: string,\n  glowColor: string,\n) => {\n  if (context && objectBody.length > 0) {\n    objectBody.forEach((object: ObjectBody) => {\n      context.fillStyle = fillColor;\n      context.strokeStyle = fillColor;\n      context.beginPath();\n\n      context.arc(object.x, object.y, 9, 0, 2 * Math.PI);\n      context.shadowBlur = 10;\n      context.shadowColor = glowColor;\n      context.fill();\n      context.stroke();\n    });\n  }\n};\n\nfunction randomNumber(max: number) {\n  let random = Math.floor(Math.random() * max);\n  while (\n    random <= 0 ||\n    random < GAME_CHAR_PIXEL_WIDTH ||\n    random >= GAME_HEIGHT ||\n    random >= random + GAME_CHAR_PIXEL_HEIGHT\n  ) {\n    random = Math.floor(Math.random() * max);\n    random = random - (random % GAME_CHAR_PIXEL_HEIGHT); // remove the stray digits so that it is even\n  }\n  return random;\n}\n\nexport const generateRandomPosition = (width: number, height: number) => {\n  return {\n    x: randomNumber(width),\n    y: randomNumber(height),\n  };\n};\n\nexport const hasSnakeCollided = (snake: ObjectBody[], currentHeadPos: ObjectBody) => {\n  // check if snake collided with its own head\n  let flag = false;\n  snake.forEach((pos: ObjectBody, index: number) => {\n    if (pos.x === currentHeadPos.x && pos.y === currentHeadPos.y && index !== 0) {\n      flag = true;\n    }\n  });\n  return flag;\n};\n\nexport interface NetworkChain {\n  name: string;\n  rpc: string;\n  chainId: number;\n  chainIdHex: string;\n  currency: string;\n  explorer: string;\n  decimals: number;\n}\n\nexport const gameNetwork = {\n  name: 'Sepolia',\n  rpc: 'https://endpoints.omniatech.io/v1/eth/sepolia/public',\n  chainId: 11155111,\n  chainIdHex: '0xaa36a7',\n  currency: 'SepoliaETH',\n  explorer: 'https://sepolia.etherscan.io',\n  decimals: 18,\n} as NetworkChain;\n\nexport const automataTestnet = {\n  name: 'Automata Testnet',\n  rpc: 'https://1rpc.io/ata/testnet',\n  chainId: 1398243,\n  chainIdHex: '0x1555e3',\n  currency: 'ETH',\n  explorer: 'https://explorer.ata.network',\n  decimals: 18,\n} as NetworkChain;\n\nconst secondaryRPC = 'https://rpc-sepolia.rockx.com';\n\nexport const gameNetworkProvider: ethers.providers.StaticJsonRpcProvider = new ethers.providers.StaticJsonRpcProvider(\n  secondaryRPC,\n);\n\nexport enum RARITY {\n  common = 'common',\n  uncommon = 'uncommon',\n  rare = 'rare',\n}\n\nexport const shortenAddress = (input: string, length = 7) => input.slice(0, length) + '...';\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const blockchainSlice = createSlice({\n  name: 'blockchain',\n  initialState: {},\n  reducers: {\n    SUBMIT_HIGH_SCORE(state, action) {},\n  },\n});\n\nexport const { SUBMIT_HIGH_SCORE } = blockchainSlice.actions;\n\nexport default blockchainSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { GAME_WIDTH, GAME_CHAR_PIXEL_WIDTH, GAME_HEIGHT } from '../utils';\n\n// center the snake at center of screen initially\nconst initialSnakeXPos = GAME_WIDTH / 2 - GAME_CHAR_PIXEL_WIDTH * 2;\nconst initialSnakeYPos = GAME_HEIGHT / 2;\n\nconst initialState = {\n  snake: [\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH * 4, y: initialSnakeYPos },\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH * 3, y: initialSnakeYPos },\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH * 2, y: initialSnakeYPos },\n    { x: initialSnakeXPos + GAME_CHAR_PIXEL_WIDTH, y: initialSnakeYPos },\n    { x: initialSnakeXPos, y: initialSnakeYPos },\n  ],\n  disallowedDirection: '',\n  score: 0,\n  level: 1, // higher level = higher snake speed, see moveSaga.ts\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState: {\n    ...initialState,\n  },\n  reducers: {\n    MOVE_SNAKE: (state, action) => {\n      let newSnake = [\n        {\n          x: state.snake[0].x + action.payload.x,\n          y: state.snake[0].y + action.payload.y,\n        },\n        ...state.snake,\n      ];\n      // remove the last segment coordinates\n      newSnake.pop();\n\n      state.snake = newSnake;\n    },\n    SET_DIS_DIRECTION: (state, action) => {\n      state.disallowedDirection = action.payload;\n    },\n    INCREASE_SNAKE: (state) => {\n      console.log('increase snake');\n      // append a segment to the end of the snake\n      const snakeLen = state.snake.length;\n\n      state.snake = [\n        ...state.snake,\n        {\n          x: state.snake[snakeLen - 1].x - GAME_CHAR_PIXEL_WIDTH,\n          y: state.snake[snakeLen - 1].y - GAME_CHAR_PIXEL_WIDTH,\n        },\n      ];\n    },\n    LEVEL_UP: (state) => {\n      state.level = state.level + 1;\n    },\n    RESET_GAME_STATE: (state) => {\n      state.snake = [...initialState.snake];\n      state.disallowedDirection = initialState.disallowedDirection;\n      state.score = initialState.score;\n      state.level = initialState.level;\n    },\n    RESET_SCORE: (state) => {\n      state.score = 0;\n    },\n    INCREMENT_SCORE: (state) => {\n      state.score = state.score + 2;\n\n      if (state.score % 20 === 0) {\n        // every X points increase level\n        state.level = state.level + 1;\n      }\n    },\n    STOP_GAME() {},\n    RESET_GAME() {},\n    MOVE_SNAKE_EVENT(state, action) {},\n    MOVE_RIGHT_EVENT() {},\n    MOVE_LEFT_EVENT() {},\n    MOVE_UP_EVENT() {},\n    MOVE_DOWN_EVENT() {},\n  },\n});\n\nexport const {\n  MOVE_SNAKE,\n  SET_DIS_DIRECTION,\n  INCREASE_SNAKE,\n  RESET_GAME_STATE,\n  RESET_SCORE,\n  INCREMENT_SCORE,\n  STOP_GAME,\n  RESET_GAME,\n  MOVE_SNAKE_EVENT,\n  MOVE_RIGHT_EVENT,\n  MOVE_LEFT_EVENT,\n  MOVE_UP_EVENT,\n  MOVE_DOWN_EVENT,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","import React from 'react';\nimport { Dialog } from '@mui/material';\nimport { useAppSelector } from '../../store/hooks';\n\ninterface GameOverModalProps {\n  open: boolean;\n}\n\nfunction GameOverModal(props: GameOverModalProps) {\n  const { open } = props;\n  const score = useAppSelector((state: any) => state.game.score);\n\n  return (\n    <Dialog\n      open={open}\n      hideBackdrop={true}\n      PaperProps={{\n        style: {\n          backgroundColor: 'transparent',\n          borderRadius: '14px',\n        },\n      }}\n    >\n      <div className=\"gameModalWrapper\">\n        <div className=\"gameOverTitle\">Game Over</div>\n        <div className=\"gameOverScoreWrapper\">\n          <div className=\"gameOverScoreTitle\">FINAL SCORE</div>\n          <div className=\"gameOverScore\">{score}</div>\n        </div>\n        <div>\n          Score automatically submitted.\n          <br />\n          Press 'r' to play again\n        </div>\n      </div>\n    </Dialog>\n  );\n}\n\nexport default GameOverModal;\n","import { CheckCircleIcon, DocumentDuplicateIcon } from '@heroicons/react/24/outline';\nimport React, { useState } from 'react';\n\ninterface ClipboardButtonProps {\n  copyText: string;\n}\n\nfunction ClipboardButton({ copyText }: ClipboardButtonProps) {\n  const [isCopied, setIsCopied] = useState(false);\n\n  async function copyTextToClipboard(text: string) {\n    if ('clipboard' in navigator) {\n      return await navigator.clipboard.writeText(text);\n    } else {\n      return document.execCommand('copy', true, text);\n    }\n  }\n\n  const handleCopyClick = () => {\n    copyTextToClipboard(copyText)\n      .then(() => {\n        setIsCopied(true);\n        setTimeout(() => {\n          setIsCopied(false);\n        }, 1500);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <button className=\"copyBtn\" onClick={handleCopyClick}>\n      {isCopied ? (\n        <CheckCircleIcon fill=\"none\" stroke=\"#6499e9\" />\n      ) : (\n        <DocumentDuplicateIcon fill=\"none\" stroke=\"#6499e9\" />\n      )}\n    </button>\n  );\n}\n\nexport default ClipboardButton;\n","import { Dialog } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { useAppSelector } from '../../store/hooks';\nimport { NFT_CONTRACT } from '../../utils';\nimport COMMON_SNAKE_DATA from '../../metadata/1.json';\nimport UNCOMMON_SNAKE_DATA from '../../metadata/2.json';\nimport RARE_SNAKE_DATA from '../../metadata/3.json';\nimport gardenSnake from '../../assets/garden_snake.png';\nimport viper from '../../assets/viper.png';\nimport kingCobra from '../../assets/king_cobra.png';\nimport { XMarkIcon } from '@heroicons/react/24/solid';\nimport ClipboardButton from '../clipboard-btn';\n\ninterface NFTDetailsModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\ninterface NFTAttributes {\n  trait_type: string;\n  value: string;\n}\n\ninterface NFTMetdata {\n  name: string;\n  description: string;\n  image: string;\n  external_url: string;\n  attributes: NFTAttributes[];\n}\n\nfunction NFTDetailsModal(props: NFTDetailsModalProps) {\n  const { open, onClose } = props;\n  const nftState = useAppSelector((state: any) => state.nft);\n  const [metadata, setMetadata] = useState<NFTMetdata>();\n  const [imageSrc, setImageSrc] = useState<any>();\n\n  useEffect(() => {\n    if (!nftState.tokenURI) {\n      return;\n    }\n\n    const tokenURIArray = nftState.tokenURI.split('/');\n    const lastPart = tokenURIArray[tokenURIArray.length - 1];\n    let json;\n\n    if (lastPart === '3.json') {\n      json = RARE_SNAKE_DATA;\n      setImageSrc(kingCobra);\n    } else if (lastPart === '2.json') {\n      json = UNCOMMON_SNAKE_DATA;\n      setImageSrc(viper);\n    } else {\n      json = COMMON_SNAKE_DATA;\n      setImageSrc(gardenSnake);\n    }\n    setMetadata({\n      name: json.name,\n      description: json.description,\n      image: json.image,\n      external_url: json.external_url,\n      attributes: JSON.parse(JSON.stringify(json.attributes)),\n    } as NFTMetdata);\n  }, [nftState.tokenURI]);\n\n  return (\n    <Dialog\n      open={open}\n      PaperProps={{\n        style: {\n          backgroundColor: 'transparent',\n          borderRadius: '14px',\n        },\n      }}\n      onClose={onClose}\n    >\n      <div className=\"nftDetailsModalWrapper\">\n        <button className=\"modalCloseBtn\" onClick={() => onClose()}>\n          <XMarkIcon />\n        </button>\n        <div>\n          {/* nft image */}\n          <img src={imageSrc} alt=\"nft image\" className=\"nftImageStyle\" />\n        </div>\n        <div className=\"nftContentWrapper\">\n          {/* nft details */}\n          <div>\n            <div className=\"nftDetailsTitle\">NFT</div>\n            <div className=\"nftDetailsValueWithClipboard\">\n              <div>{NFT_CONTRACT}</div> <ClipboardButton copyText={NFT_CONTRACT} />\n            </div>\n          </div>\n          <div>\n            <div className=\"nftDetailsTitle\">TOKEN ID</div>\n            <div className=\"nftDetailsValueWithClipboard\">\n              <div>#{nftState.tokenID}</div> <ClipboardButton copyText={nftState.tokenID} />\n            </div>\n          </div>\n          <div>\n            <div className=\"nftDetailsTitle\">RARITY</div>\n            <div className=\"nftRarity\">{nftState.rarity}</div>\n          </div>\n          <div>\n            <div className=\"nftDetailsTitle\">Description</div>\n            <div>{metadata && metadata.description}</div>\n          </div>\n        </div>\n      </div>\n    </Dialog>\n  );\n}\n\nexport default NFTDetailsModal;\n","import 'dotenv/config';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport '../App.css';\nimport { DOWN, LEFT, RIGHT, UP } from '../store/actions';\nimport { useAppSelector } from '../store/hooks';\nimport { ObjectBody } from '../types';\nimport {\n  clearBoard,\n  drawObject,\n  drawSnake,\n  GAME_CHAR_PIXEL_HEIGHT,\n  GAME_CHAR_PIXEL_WIDTH,\n  generateRandomPosition,\n  hasSnakeCollided,\n  RARITY,\n} from '../utils';\nimport { SUBMIT_HIGH_SCORE } from '../store/blockchainSlice';\nimport {\n  INCREASE_SNAKE,\n  INCREMENT_SCORE,\n  STOP_GAME,\n  RESET_GAME,\n  RESET_GAME_STATE,\n  MOVE_SNAKE_EVENT,\n  MOVE_RIGHT_EVENT,\n  MOVE_LEFT_EVENT,\n  MOVE_UP_EVENT,\n  MOVE_DOWN_EVENT,\n} from '../store/gameSlice';\nimport GameOverModal from './modal/gameOverModal';\nimport Button from '@mui/material/Button';\nimport NFTDetailsModal from './modal/nftDetailsModal';\n\ninterface CanvasBoardProps {\n  height: number;\n  width: number;\n}\n\nfunction CanvasBoard({ height, width }: CanvasBoardProps) {\n  const dispatch = useDispatch();\n  const score = useAppSelector((state: any) => state.game.score);\n  const playerSnake = useAppSelector((state: any) => state.game.snake);\n  const level = useAppSelector((state: any) => state.game.level);\n  const userState = useAppSelector((state: any) => state.user);\n  const nftState = useAppSelector((state: any) => state.nft);\n  const disallowedDirection = useAppSelector((state: any) => state.game.disallowedDirection);\n\n  const snakeColor = '#ffffff';\n  const snakeGlowColor = useMemo(() => {\n    return nftState.rarity === RARITY.common\n      ? '#00e676'\n      : nftState.rarity === RARITY.rare\n      ? '#ffff00'\n      : nftState.rarity === RARITY.uncommon\n      ? '#2979ff'\n      : '#000000';\n  }, [nftState]);\n\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\n  const [foodPosition, setFoodPosition] = useState<ObjectBody>(\n    generateRandomPosition(width - GAME_CHAR_PIXEL_WIDTH, height - GAME_CHAR_PIXEL_HEIGHT),\n  );\n  const [isConsumed, setIsConsumed] = useState<boolean>(false);\n  const [gameEnded, setGameEnded] = useState<boolean>(false);\n  const [openNFTModal, setOpenNFTModal] = useState<boolean>(false);\n\n  // ds = direction not allowed\n  const moveSnake = useCallback(\n    (dx = 0, dy = 0, ds: string, dlevel: number) => {\n      if (dx > 0 && dy === 0 && ds !== RIGHT) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_RIGHT_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n\n      if (dx < 0 && dy === 0 && ds !== LEFT) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_LEFT_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n\n      if (dx === 0 && dy < 0 && ds !== UP) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_UP_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n\n      if (dx === 0 && dy > 0 && ds !== DOWN) {\n        dispatch(\n          MOVE_SNAKE_EVENT({\n            x: dx,\n            y: dy,\n            direction: MOVE_DOWN_EVENT,\n            level: dlevel,\n          }),\n        );\n      }\n    },\n    [dispatch],\n  );\n\n  const handleKeyEvents = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'w':\n          !gameEnded && moveSnake(0, -20, disallowedDirection, level);\n          break;\n        case 's':\n          !gameEnded && moveSnake(0, 20, disallowedDirection, level);\n          break;\n        case 'a':\n          if (!disallowedDirection) {\n            // prevent users from moving the opposite direction (left)\n            // at the start of the game\n            event.preventDefault();\n            break;\n          }\n          !gameEnded && moveSnake(-20, 0, disallowedDirection, level);\n          break;\n        case 'd':\n          !gameEnded && moveSnake(20, 0, disallowedDirection, level);\n          break;\n      }\n    },\n    [disallowedDirection, level, gameEnded, moveSnake],\n  );\n\n  const isOutOfBoundary = (snake: any) => {\n    return snake[0].x >= width || snake[0].x <= 0 || snake[0].y <= 0 || snake[0].y >= height;\n  };\n\n  useEffect(() => {\n    // snake eat the food\n    const newFoodPosition = generateRandomPosition(width - GAME_CHAR_PIXEL_WIDTH, height - GAME_CHAR_PIXEL_HEIGHT);\n\n    if (isConsumed && foodPosition !== newFoodPosition) {\n      setFoodPosition(newFoodPosition);\n      setIsConsumed(false);\n      dispatch(INCREASE_SNAKE());\n      dispatch(INCREMENT_SCORE());\n    }\n  }, [isConsumed, foodPosition, width, height]);\n\n  useEffect(() => {\n    if (userState.nftBalance !== 1) {\n      // only load snake if user has connect wallet\n      return;\n    }\n\n    // draw on canvas each time\n    setContext(canvasRef.current && canvasRef.current.getContext('2d'));\n    clearBoard(context);\n\n    // render snake\n    playerSnake && drawSnake(context, playerSnake, snakeColor, snakeGlowColor);\n\n    // render food\n    drawObject(context, [foodPosition], '#ffffff');\n  }, [context, playerSnake, foodPosition, userState.nftBalance]);\n\n  useEffect(() => {\n    const xDiff = Math.abs(playerSnake[0].x - foodPosition.x);\n    const yDiff = Math.abs(playerSnake[1].y - foodPosition.y);\n\n    // difference of position might be off a little\n    // when food is consumed\n    if (xDiff <= 18 && yDiff <= 18 && !isConsumed) {\n      // require isConsumed variable to prevent double counting\n      setIsConsumed(true);\n    }\n  }, [playerSnake, foodPosition, isConsumed]);\n\n  useEffect(() => {\n    // check boundaries and collision\n    if (hasSnakeCollided(playerSnake, playerSnake[0]) || isOutOfBoundary(playerSnake)) {\n      console.log('game ends');\n      setGameEnded(true);\n      dispatch(STOP_GAME());\n      window.removeEventListener('keypress', handleKeyEvents);\n    } else {\n      setGameEnded(false);\n    }\n  }, [playerSnake, dispatch, handleKeyEvents]);\n\n  const handleResetBoard = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'r':\n          // resetBoard;\n          setGameEnded(false);\n          dispatch(RESET_GAME());\n          dispatch(RESET_GAME_STATE());\n          clearBoard(context);\n\n          // render snake\n          playerSnake && drawSnake(context, playerSnake, snakeColor, snakeGlowColor);\n\n          // render food\n          const newFoodPosition = generateRandomPosition(\n            width - GAME_CHAR_PIXEL_WIDTH,\n            height - GAME_CHAR_PIXEL_HEIGHT,\n          );\n          setFoodPosition(newFoodPosition);\n      }\n    },\n    [context, dispatch, height, width, playerSnake],\n  );\n\n  useEffect(() => {\n    if (!userState || (userState && !userState.isConnected && userState.nftBalance <= 0)) {\n      return;\n    }\n\n    // key input\n    window.addEventListener('keypress', handleKeyEvents);\n    window.addEventListener('keypress', handleResetBoard);\n\n    return () => {\n      window.removeEventListener('keypress', handleKeyEvents);\n      window.removeEventListener('keypress', handleResetBoard);\n    };\n  }, [disallowedDirection, handleKeyEvents, userState.isConnected]);\n\n  useEffect(() => {\n    if (gameEnded) {\n      dispatch(\n        SUBMIT_HIGH_SCORE({\n          wallet: `${userState.wallet}`,\n          score: `${score}`,\n        }),\n      );\n    }\n  }, [gameEnded]);\n\n  return (\n    <div className=\"mainCanvasWrapper\">\n      <canvas\n        ref={canvasRef}\n        className={gameEnded ? 'canvasWrapperGameEnd' : 'canvasWrapper'}\n        height={height}\n        width={width}\n      />\n      <div className=\"instructionWrapper\">\n        <div>Controls: W,S,A,D to move - R to reset</div>\n        <Button\n          variant=\"outlined\"\n          onClick={() => setOpenNFTModal(true)}\n          sx={{\n            color: '#fafafa',\n            fontSize: '1rem',\n            fontWeight: 700,\n            borderRadius: '10px',\n          }}\n        >\n          View NFT\n        </Button>\n      </div>\n      <GameOverModal open={gameEnded} />\n      <NFTDetailsModal open={openNFTModal} onClose={() => setOpenNFTModal(false)} />\n    </div>\n  );\n}\n\nexport default CanvasBoard;\n","import { ethers } from 'ethers';\nimport React from 'react';\nimport useSWR from 'swr';\nimport { gameNetworkProvider, LEADERBOARD_CONTRACT, shortenAddress } from '../utils';\nimport Leaderboard_ABI from '../abis/Leaderboard_ABI.json';\nimport Blockies from 'react-blockies';\nimport { MulticallWrapper } from 'ethers-multicall-provider';\n\ninterface Player {\n  address: string;\n  score: number;\n}\n\n/**\n * ranking board contract tracks top 10\n * but in case 1rpc rate limit, we fetch only 3\n */\nconst MAX_TOP_PLAYER_COUNT = 10;\n\nconst fetchRanking = async (key: string) => {\n  console.log('fetching ranking');\n  let data: Player[] = [];\n\n  try {\n    const multicall = MulticallWrapper.wrap(gameNetworkProvider);\n    const rankingContract = new ethers.Contract(LEADERBOARD_CONTRACT, Leaderboard_ABI, multicall);\n    const calls = [];\n\n    for (let i = 0; i < MAX_TOP_PLAYER_COUNT; i++) {\n      calls.push(rankingContract.leaderboard(i));\n    }\n\n    const scoresList = await Promise.all(calls);\n\n    for (const player of scoresList) {\n      if (player && player.player !== '0x0000000000000000000000000000000000000000') {\n        data.push({\n          address: player.player,\n          score: player.score.toNumber(),\n        } as Player);\n      }\n    }\n  } catch (err) {\n    console.log('error fetching ranking: ', err);\n  }\n\n  return data;\n};\n\nfunction RankingBoard() {\n  const { data, error, isLoading } = useSWR('fetch_ranking', fetchRanking, {\n    refreshInterval: 60000,\n    revalidateOnFocus: false,\n  });\n\n  return (\n    <div className=\"rankingBoardWrapper\">\n      <div>TOP {MAX_TOP_PLAYER_COUNT} PLAYERS</div>\n      {!data || isLoading ? (\n        <p>Loading...</p>\n      ) : data ? (\n        <div className=\"rankingContentWrapper\">\n          {data.length === 0 && <div>No highscores.</div>}\n          {data.map((player, index) => {\n            return (\n              <div className=\"rankCard\" key={index}>\n                <div className=\"rankInfo\">\n                  {index + 1}\n                  <Blockies\n                    seed={player.address}\n                    size={10}\n                    scale={3}\n                    color=\"#8ed1fb\"\n                    bgColor=\"#5272f2\"\n                    spotColor=\"#aedefc\"\n                    className=\"avatar\"\n                  />\n                  {shortenAddress(player.address)}\n                </div>\n                <div>{player.score}</div>\n              </div>\n            );\n          })}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default RankingBoard;\n","import React from 'react';\nimport { useAppSelector } from '../store/hooks';\n\nfunction ScoreCard() {\n  // const score = useSelector((state: any) => (state.gameReducer as GameState).score);\n  const score = useAppSelector((state: any) => state.game.score);\n  return (\n    <div className=\"scoreWrapper\">\n      <div className=\"scoreTitle\">SCORE</div>\n      <div className=\"scoreValue\">{score}</div>\n    </div>\n  );\n}\n\nexport default ScoreCard;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  tokenURI: '',\n  tokenID: '',\n  rarity: '',\n};\n\nexport const nftSlice = createSlice({\n  name: 'nft',\n  initialState: {\n    ...initialState,\n  },\n  reducers: {\n    UPDATE_TOKEN_URI: (state, action) => {\n      state.tokenURI = action.payload;\n    },\n    UPDATE_TOKEN_ID: (state, action) => {\n      state.tokenID = action.payload;\n    },\n    UPDATE_RARITY: (state, action) => {\n      state.rarity = action.payload;\n    },\n    RESET: (state) => {\n      state = initialState;\n    },\n  },\n});\n\nexport const { UPDATE_TOKEN_URI, UPDATE_TOKEN_ID, UPDATE_RARITY } = nftSlice.actions;\n\nexport default nftSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  balance: '0',\n  nftBalance: 0,\n  wallet: '',\n  isConnected: false,\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    ...initialState,\n  },\n  reducers: {\n    UPDATE_BALANCE: (state, action) => {\n      state.balance = action.payload;\n    },\n    UPDATE_NFT_BALANCE: (state, action) => {\n      state.nftBalance = action.payload;\n    },\n    UPDATE_WALLET: (state, action) => {\n      state.wallet = action.payload;\n    },\n    UPDATE_IS_CONNECTED: (state, action) => {\n      state.isConnected = action.payload;\n    },\n    USER_RESET: (state) => {\n      state = initialState;\n    },\n  },\n});\n\nexport const { UPDATE_BALANCE, UPDATE_NFT_BALANCE, UPDATE_WALLET, UPDATE_IS_CONNECTED, USER_RESET } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import type { ExternalProvider } from '@ethersproject/providers';\n\nexport interface MetaMaskHolder {\n  ethereum?: ExternalProvider;\n}\n\nconst maybeEthereum = typeof window !== 'undefined' && (window as any).ethereum;\nexport const metaMask = maybeEthereum ? (maybeEthereum as Required<ExternalProvider>) : null;\n","import React, { useEffect } from 'react';\nimport { Button, CircularProgress, Dialog } from '@mui/material';\nimport { useAppSelector } from '../../store/hooks';\nimport { metaMask } from '../../utils/metamask';\n\ninterface StartScreenModalProps {\n  open: boolean;\n  isStarting: boolean;\n  isMinting: boolean;\n  setIsMinting: React.Dispatch<React.SetStateAction<boolean>>;\n  onConnectWallet: () => void;\n  mintNFT: () => Promise<void>;\n}\n\nfunction StartScreenModal(props: StartScreenModalProps) {\n  const { open, isStarting, isMinting, onConnectWallet, mintNFT, setIsMinting } = props;\n  const userState = useAppSelector((state) => state.user);\n\n  if (userState && userState.isConnected && userState.nftBalance > 0) {\n    // hide start screen if user has nft\n    return <></>;\n  }\n\n  return (\n    <Dialog\n      open={open}\n      hideBackdrop={true}\n      PaperProps={{\n        style: {\n          backgroundColor: 'transparent',\n          borderRadius: '14px',\n        },\n      }}\n      className=\"startScreenModal\"\n    >\n      <div className=\"modalWrapper\">\n        <div className=\"menu-title\">Snake</div>\n        <div className=\"modalContentWrapper\">\n          <p>Welcome to the traditional snake game.</p>\n          {!metaMask ? (\n            <>\n              <div>This game requires Metamask to play.</div>\n              <div>Please install Metamask to continue.</div>\n              <Button\n                variant=\"contained\"\n                color=\"customBtnColor\"\n                href=\"https://metamask.io/download\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                sx={{\n                  color: '#fafafa',\n                  fontSize: '1rem',\n                  fontWeight: 700,\n                  borderRadius: '10px',\n                }}\n              >\n                Install Metamask\n              </Button>\n            </>\n          ) : userState.isConnected ? (\n            userState.nftBalance > 0 ? null : (\n              <>\n                <div>This game requires you to mint a NFT to proceed.</div>\n                <div>\n                  Get some Sepolia ETH from{' '}\n                  <a href=\"https://sepoliafaucet.io/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    https://sepoliafaucet.io/\n                  </a>\n                </div>\n                <div>\n                  Click <strong>Mint NFT</strong> to mint a Snake.\n                </div>\n                <div>Wait for the transaction to finish and you may begin the game.</div>\n                <Button\n                  variant=\"contained\"\n                  color=\"customBtnColor\"\n                  onClick={async () => {\n                    try {\n                      setIsMinting(true);\n                      await mintNFT();\n                    } catch (e) {\n                      console.log(e);\n                    } finally {\n                      setIsMinting(false);\n                    }\n                  }}\n                  sx={{\n                    color: '#fafafa',\n                    fontSize: '1rem',\n                    fontWeight: 700,\n                    borderRadius: '10px',\n                  }}\n                  disabled={isMinting}\n                >\n                  {isMinting && (\n                    <>\n                      <CircularProgress size={14} />\n                      <>&nbsp;</>\n                    </>\n                  )}{' '}\n                  Mint NFT\n                </Button>\n              </>\n            )\n          ) : (\n            /* user has metamask, connect wallet to proceed */\n            <>\n              <div>\n                1. Click <strong>Start Game</strong> and connect with your Metamask wallet.\n              </div>\n              <div>2. Approve and switch the network on Metamask.</div>\n              <div>3. Your network will be set to Sepolia Testnet.</div>\n              <div>\n                Toggle <strong>Show test networks</strong> on Metamask if the Metamask does not prompt for the switch.\n              </div>\n              <Button\n                variant=\"contained\"\n                color=\"customBtnColor\"\n                onClick={onConnectWallet}\n                disableElevation={true}\n                sx={{\n                  color: '#fafafa',\n                  fontSize: '1rem',\n                  fontWeight: 700,\n                  borderRadius: '10px',\n                }}\n                disabled={isStarting}\n              >\n                {isStarting && (\n                  <>\n                    <CircularProgress size={14} />\n                    <>&nbsp;</>\n                  </>\n                )}{' '}\n                Start Game\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n    </Dialog>\n  );\n}\n\nexport default StartScreenModal;\n","import { ethers } from 'ethers';\nimport React, { useEffect, useState } from 'react';\nimport NFTABI from './abis/NFTABI.json';\nimport NFTNoVRFABI from './abis/NFTNoVRFABI.json';\nimport './App.css';\nimport CanvasBoard from './components/canvasboard';\nimport RankingBoard from './components/rankingboard';\nimport ScoreCard from './components/score';\nimport COMMON_SNAKE_DATA from './metadata/1.json';\nimport UNCOMMON_SNAKE_DATA from './metadata/2.json';\nimport RARE_SNAKE_DATA from './metadata/3.json';\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { UPDATE_RARITY, UPDATE_TOKEN_ID, UPDATE_TOKEN_URI } from './store/nftSlice';\nimport { UPDATE_BALANCE, UPDATE_IS_CONNECTED, UPDATE_NFT_BALANCE, UPDATE_WALLET } from './store/userSlice';\nimport { gameNetwork, gameNetworkProvider, GAME_HEIGHT, GAME_WIDTH, NFT_CONTRACT, shortenAddress } from './utils';\nimport StartScreenModal from './components/modal/startScreenModal';\nimport { metaMask } from './utils/metamask';\n\nlet signerProvider: ethers.providers.Web3Provider;\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  const userState = useAppSelector((state) => state.user);\n  const gameState = useAppSelector((state) => state.game);\n  const [isMinting, setIsMinting] = useState(false);\n  const [isStarting, setIsStarting] = useState(false);\n  const [openStartScreen, setOpenStartScreen] = useState(true);\n\n  const updateWalletBalance = (accounts: any) => {\n    if (signerProvider && accounts.length) {\n      signerProvider.getBalance(accounts[0]).then((result: any) => {\n        const bal = ethers.utils.formatEther(result);\n        dispatch(UPDATE_BALANCE(bal));\n      });\n    }\n  };\n\n  const mintNFT = async () => {\n    if (!signerProvider) {\n      return;\n    }\n\n    const signer = signerProvider.getSigner();\n    const nftContract = new ethers.Contract(NFT_CONTRACT, NFTNoVRFABI, signer);\n    const mintTx = await nftContract.safeMint();\n    const mintTxReceipt = await mintTx.wait();\n\n    if (mintTxReceipt && mintTxReceipt.status === 1) {\n      await fetchNFT(userState.wallet);\n    }\n  };\n\n  const fetchNFT = async (wallet: string) => {\n    const nftContract = new ethers.Contract(NFT_CONTRACT, NFTNoVRFABI, gameNetworkProvider);\n    const nftBalance = await nftContract.balanceOf(wallet);\n\n    if (nftBalance.toNumber() > 0) {\n      try {\n        const tokenId = await nftContract.getTokenID(wallet);\n\n        if (!tokenId) {\n          return;\n        }\n\n        const tokenURI = await nftContract.tokenURI(tokenId);\n\n        // read token URI and save nft info\n        // should do this from a db or directly via IPFS\n        // ipfs url is https://<gateway>/ipfs/<CID>/<num>.json\n        const tokenURIArray = tokenURI.split('/');\n        const lastPart = tokenURIArray[tokenURIArray.length - 1];\n        let rarity;\n        let json;\n\n        if (lastPart === '3.json') {\n          json = RARE_SNAKE_DATA;\n        } else if (lastPart === '2.json') {\n          json = UNCOMMON_SNAKE_DATA;\n        } else {\n          json = COMMON_SNAKE_DATA;\n        }\n\n        rarity = json.attributes[0].trait_type === 'Rarity' && json.attributes[0].value;\n\n        console.log('token id: ', tokenId.toNumber());\n        console.log('token uri: ', tokenURI);\n        console.log('rarity: ', rarity);\n\n        dispatch(UPDATE_NFT_BALANCE(nftBalance.toNumber()));\n        dispatch(UPDATE_TOKEN_ID(tokenId.toNumber()));\n        dispatch(UPDATE_TOKEN_URI(tokenURI));\n        dispatch(UPDATE_RARITY(rarity));\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  };\n\n  const onConnectWallet = () => {\n    if (!window.ethereum) {\n      console.log('Please install Metamask');\n      return;\n    }\n\n    setIsStarting(true);\n\n    signerProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // MetaMask requires requesting permission to connect users accounts\n    signerProvider\n      .send('eth_requestAccounts', [])\n      .then(async (accounts: any) => {\n        if (accounts.length > 0) {\n          try {\n            await (signerProvider.provider as any).request({\n              method: 'wallet_switchEthereumChain',\n              params: [\n                {\n                  chainId: gameNetwork.chainIdHex,\n                },\n              ],\n            });\n\n            const address = ethers.utils.getAddress(accounts[0]);\n\n            await fetchNFT(address);\n            dispatch(UPDATE_WALLET(address));\n            dispatch(UPDATE_IS_CONNECTED(true));\n            updateWalletBalance(accounts);\n          } catch (err) {\n            console.error(err);\n          }\n        }\n      })\n      .catch((e: any) => console.error(e))\n      .finally(() => {\n        setIsStarting(false);\n      });\n  };\n\n  const handleAccountsChanged = async (accounts: any) => {\n    if (accounts.length === 0) {\n      console.log('Please connect to Metamask');\n    } else if (accounts[0].toLowerCase() !== userState.wallet.toLowerCase()) {\n      const address = ethers.utils.getAddress(accounts[0]);\n      dispatch(UPDATE_NFT_BALANCE(0));\n      dispatch(UPDATE_TOKEN_ID(''));\n      dispatch(UPDATE_TOKEN_URI(''));\n      dispatch(UPDATE_RARITY(''));\n      await fetchNFT(address);\n      dispatch(UPDATE_WALLET(address));\n      updateWalletBalance(accounts);\n    }\n    setIsMinting(false);\n    setIsStarting(false);\n  };\n\n  useEffect(() => {\n    if (!metaMask) {\n      return;\n    }\n    window.ethereum.on('accountsChanged', handleAccountsChanged);\n  }, []);\n\n  useEffect(() => {\n    if (userState && userState.isConnected && userState.nftBalance > 0) {\n      setOpenStartScreen(false);\n    } else if (userState.wallet) {\n      // change account\n      // open the startscreen modal\n      setOpenStartScreen(true);\n    }\n  }, [userState]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"gameScreenWrapper\">\n        <div className=\"mainBoardWrapper\">\n          <div className=\"header\">\n            <div className=\"walletInfoWrapper\">\n              <div className=\"walletTitle\">LEVEL</div>\n              <div className=\"walletValue\">{gameState.level}</div>\n            </div>\n            <ScoreCard />\n            <div className=\"walletInfoWrapper\">\n              <div className=\"walletTitle\">WALLET</div>\n              <div className=\"walletValue\">{shortenAddress(userState.wallet)}</div>\n            </div>\n          </div>\n          <CanvasBoard height={GAME_HEIGHT} width={GAME_WIDTH} />\n        </div>\n        <RankingBoard />\n      </div>\n      <StartScreenModal\n        open={openStartScreen}\n        isStarting={isStarting}\n        isMinting={isMinting}\n        setIsMinting={setIsMinting}\n        onConnectWallet={onConnectWallet}\n        mintNFT={mintNFT}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'dotenv/config';\nimport { ethers } from 'ethers';\nimport { call, takeEvery } from 'redux-saga/effects';\nimport { gameNetworkProvider, LEADERBOARD_CONTRACT } from '../../utils';\nimport { SUBMIT_HIGH_SCORE } from '../blockchainSlice';\nimport Leaderboard_ABI from '../../abis/Leaderboard_ABI.json';\n\nasync function invokeContract(wallet: string, score: number) {\n  const deployerKey = process.env.REACT_APP_LEADERBOARD_PK || '';\n  const signer = new ethers.Wallet(deployerKey, gameNetworkProvider);\n  const scoreboardContract = new ethers.Contract(LEADERBOARD_CONTRACT, Leaderboard_ABI, signer);\n\n  try {\n    let isEligible = false;\n    // always fetch the 10th player in the ranking board\n    const minTopScore = await scoreboardContract.leaderboard(9);\n\n    if (minTopScore.player === '0x0000000000000000000000000000000000000000') {\n      isEligible = true;\n    } else if (minTopScore.score.toNumber() < score) {\n      isEligible = true;\n    }\n\n    if (isEligible) {\n      const tx = await scoreboardContract.addScore(`${wallet}`, `${score}`);\n      const txReceipt = await tx.wait();\n\n      if (txReceipt && txReceipt.status === 1) {\n        console.log('score updated: ', tx);\n      }\n    }\n  } catch (e) {\n    console.log('error submitting highscore: ', e);\n  }\n}\n\n/**\n * listen to submit high score from dispatch and call contract\n */\nfunction* submitHighScore(action: any) {\n  console.log('submit high score');\n  // submit highscore using deployer wallet\n  const deployerKey = process.env.REACT_APP_LEADERBOARD_PK || '';\n  const { wallet, score } = action.payload;\n\n  if (!deployerKey || score <= 0) {\n    console.error('Deployer wallet not configure');\n    return;\n  }\n\n  yield call(invokeContract, wallet, score);\n}\n\nfunction* blockchainSaga() {\n  yield takeEvery(SUBMIT_HIGH_SCORE, submitHighScore);\n}\n\nexport default blockchainSaga;\n","import { delay, put, takeLatest } from 'redux-saga/effects';\nimport { DOWN, LEFT, RIGHT, UP } from '../actions';\nimport {\n  MOVE_DOWN_EVENT,\n  MOVE_LEFT_EVENT,\n  MOVE_RIGHT_EVENT,\n  MOVE_SNAKE,\n  MOVE_SNAKE_EVENT,\n  MOVE_UP_EVENT,\n  RESET_GAME,\n  SET_DIS_DIRECTION,\n  STOP_GAME,\n} from '../gameSlice';\n\nexport function* moveSaga(actions: any) {\n  // keep looping to move the snake\n  while (actions.type !== RESET_GAME.toString() && actions.type !== STOP_GAME.toString()) {\n    // run the snake\n    yield put(\n      MOVE_SNAKE({\n        x: actions.payload.x,\n        y: actions.payload.y,\n      }),\n    );\n\n    // set the invalid direction\n    // invalid direction is always opposite\n    switch (actions.payload.direction.type.toString()) {\n      case `${MOVE_RIGHT_EVENT}`:\n        yield put(SET_DIS_DIRECTION(LEFT));\n        break;\n      case `${MOVE_LEFT_EVENT}`:\n        yield put(SET_DIS_DIRECTION(RIGHT));\n        break;\n      case `${MOVE_UP_EVENT}`:\n        yield put(SET_DIS_DIRECTION(DOWN));\n        break;\n      case `${MOVE_DOWN_EVENT}`:\n        yield put(SET_DIS_DIRECTION(UP));\n        break;\n    }\n\n    let gameSpeed = 100; // lower number = faster\n    if (actions.payload.level) {\n      const level = actions.payload.level;\n      if (level === 1) {\n        gameSpeed = 100;\n      } else if (level === 2) {\n        gameSpeed = 90;\n      } else if (level === 3) {\n        gameSpeed = 80;\n      } else if (level === 4) {\n        gameSpeed = 70;\n      } else if (level === 5) {\n        gameSpeed = 60;\n      } else if (level === 6) {\n        gameSpeed = 50;\n      } else if (level === 7) {\n        gameSpeed = 40;\n      } else if (level > 7) {\n        gameSpeed = 30;\n      }\n    }\n    yield delay(gameSpeed);\n  }\n}\n\nexport function* watcherMoveSaga() {\n  yield takeLatest([MOVE_SNAKE_EVENT, RESET_GAME, STOP_GAME], moveSaga);\n}\n","import { all } from 'redux-saga/effects';\nimport blockchainSaga from './blockchainSaga';\nimport { watcherMoveSaga } from './moveSaga';\n\nexport function* rootSaga() {\n  yield all([blockchainSaga(), watcherMoveSaga()]);\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport userReducer from './userSlice';\nimport nftReducer from './nftSlice';\nimport blockchainReducer from './blockchainSlice';\nimport gameLogicReducer from './gameSlice';\nimport { rootSaga } from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    game: gameLogicReducer,\n    blockchain: blockchainReducer,\n    user: userReducer,\n    nft: nftReducer,\n  },\n  middleware: [sagaMiddleware],\n});\n\nconsole.log(store.getState());\n\nsagaMiddleware.run(rootSaga);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport { createTheme, ThemeProvider } from '@mui/material';\n\nconst { palette } = createTheme();\nconst { augmentColor } = palette;\nconst createColor = (mainColor: string) => augmentColor({ color: { main: mainColor } });\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: ['Play', 'sans-serif'].join(','),\n  },\n  palette: {\n    customBtnColor: createColor('#0284ff'),\n  },\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}